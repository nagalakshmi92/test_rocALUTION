<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classrocalution_1_1_vector" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>rocalution::Vector</compoundname>
    <basecompoundref refid="classrocalution_1_1_base_rocalution" prot="public" virt="non-virtual">rocalution::BaseRocalution&lt; ValueType &gt;</basecompoundref>
    <derivedcompoundref refid="classrocalution_1_1_local_vector" prot="public" virt="non-virtual">rocalution::LocalVector&lt; int &gt;</derivedcompoundref>
    <derivedcompoundref refid="classrocalution_1_1_global_vector" prot="public" virt="non-virtual">rocalution::GlobalVector&lt; ValueType &gt;</derivedcompoundref>
    <derivedcompoundref refid="classrocalution_1_1_local_vector" prot="public" virt="non-virtual">rocalution::LocalVector&lt; ValueType &gt;</derivedcompoundref>
    <includes refid="vector_8hpp" local="no">vector.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classrocalution_1_1_vector_1a0a69b9fd8f7263d1444c331e8ce18f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::CopyFrom</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;src)</argsstring>
        <name>CopyFrom</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1abf2ee09b2fccba75add5ca106026cb25">CopyFrom</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy vector from another vector. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>CopyFrom</computeroutput> copies values from another vector.</para><para><simplesect kind="note"><para>This function allows cross platform copying. One of the objects could be allocated on the accelerator backend.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classrocalution_1_1_vector" kindref="compound">Vector</ref>, where values should be copied from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;ValueType&gt;<sp/>vec1,<sp/>vec2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>and<sp/>initialize<sp/>vec1<sp/>and<sp/>vec2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>vec1<sp/>to<sp/>accelerator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>vec1.MoveToAccelerator();</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now,<sp/>vec1<sp/>is<sp/>on<sp/>the<sp/>accelerator<sp/>(if<sp/>available)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>vec2<sp/>is<sp/>on<sp/>the<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copy<sp/>vec1<sp/>to<sp/>vec2<sp/>(or<sp/>vice<sp/>versa)<sp/>will<sp/>move<sp/>data<sp/>between<sp/>host<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>accelerator<sp/>backend</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vec1.CopyFrom(vec2);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a32a36abf74009fabb2af1f5250649680" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::CopyFrom</definition>
        <argsstring>(const GlobalVector&lt; ValueType &gt; &amp;src)</argsstring>
        <name>CopyFrom</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1abbbcd38528e2e8d206074ded7d057675">CopyFrom</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="212" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classrocalution_1_1_vector_1a6c78a236e9c0b9ffefd237d8a76e5b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::CloneFrom</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;src)</argsstring>
        <name>CloneFrom</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a9eeae5cca8f0af5c5723510b1b280e60">CloneFrom</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Clone the vector. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>CloneFrom</computeroutput> clones the entire vector, including data and backend descriptor from another <ref refid="classrocalution_1_1_vector" kindref="compound">Vector</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classrocalution_1_1_vector" kindref="compound">Vector</ref> to clone from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;ValueType&gt;<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>and<sp/>initialize<sp/>vec<sp/>(host<sp/>or<sp/>accelerator)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">LocalVector&lt;ValueType&gt;<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>cloning<sp/>vec,<sp/>tmp<sp/>will<sp/>have<sp/>identical<sp/>values<sp/>and<sp/>will<sp/>be<sp/>on<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>backend<sp/>as<sp/>vec</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tmp.CloneFrom(vec);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ab620189a4e55cd97bf86478ff0df6c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::CloneFrom</definition>
        <argsstring>(const GlobalVector&lt; ValueType &gt; &amp;src)</argsstring>
        <name>CloneFrom</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a0ebad2dd42e2051f897bb50c08531f55">CloneFrom</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="268" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrocalution_1_1_vector_1ab7cc8dac1aaae183de2a26b9f2e891a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rocalution::Vector&lt; ValueType &gt;::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a1a5d1bd49e7ce33f80f1f71e9e681818" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual rocalution::Vector&lt; ValueType &gt;::~Vector</definition>
        <argsstring>()</argsstring>
        <name>~Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a69a7295c57e35e030999c5764c05cfe7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>IndexType2</type>
        <definition>virtual IndexType2 rocalution::Vector&lt; ValueType &gt;::GetSize</definition>
        <argsstring>(void) const =0</argsstring>
        <name>GetSize</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a5e804a659202e2bd824f2d3e583c9729">GetSize</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a42d48bb3bb6a89218ede8fcff7bbc644">GetSize</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a42d48bb3bb6a89218ede8fcff7bbc644">GetSize</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return the size of the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1af4e80d10bbfd9a243d0dfa3a5481358c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int rocalution::Vector&lt; ValueType &gt;::GetLocalSize</definition>
        <argsstring>(void) const</argsstring>
        <name>GetLocalSize</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a1a28e19929589726047f44ffbbdd1a02">GetLocalSize</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return the size of the local vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1abd0787513f949d91f445890ea4d2ce81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int rocalution::Vector&lt; ValueType &gt;::GetGhostSize</definition>
        <argsstring>(void) const</argsstring>
        <name>GetGhostSize</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1ad7bcf809595d1c1701c4078c051b3e25">GetGhostSize</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return the size of the ghost vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1afb8f27ffca2ff3d59995d56b7093330c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool rocalution::Vector&lt; ValueType &gt;::Check</definition>
        <argsstring>(void) const =0</argsstring>
        <name>Check</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1aaaf75d2ec850ee5646866ed1b6c0901c">Check</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a83a0ca326ebe939dac9cea93022dc663">Check</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a83a0ca326ebe939dac9cea93022dc663">Check</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Perform a sanity check of the vector. </para>        </briefdescription>
        <detaileddescription>
<para>Checks, if the vector contains valid data, i.e. if the values are not infinity and not NaN (not a number).</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vector is ok (empty vector is also ok). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is something wrong with the values. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1af0cc06112714483ae4af25fba1e9bd04" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::Clear</definition>
        <argsstring>(void)=0</argsstring>
        <name>Clear</name>
        <reimplements refid="classrocalution_1_1_base_rocalution_1a97c33fd007833bd22cd3ce142cebe06b">Clear</reimplements>
        <reimplementedby refid="classrocalution_1_1_global_vector_1abd727ab7d5d7f676f973e0a5664237a5">Clear</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1ae58d9c9b346f80079f4028108b8dfdb2">Clear</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1ae58d9c9b346f80079f4028108b8dfdb2">Clear</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear (free all data) the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ac61cd2a27428d8cb0b7325697ab54883" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::Zeros</definition>
        <argsstring>(void)=0</argsstring>
        <name>Zeros</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a9666aa5c811a3774a0d59f6810d7ca1a">Zeros</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a945331227cdbc7889ede1070ef502b81">Zeros</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a945331227cdbc7889ede1070ef502b81">Zeros</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set all values of the vector to 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1aa979fabb41b06ca0413ca44fa8ffe714" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::Ones</definition>
        <argsstring>(void)=0</argsstring>
        <name>Ones</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1ae8d0ce7fa54fd86dce4612b3baa1ca31">Ones</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1aee43d40aa4bd9347aa7f4757244a6d8e">Ones</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1aee43d40aa4bd9347aa7f4757244a6d8e">Ones</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set all values of the vector to 1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a3df2b00c6da1ac2f35a577a31cbe98b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::SetValues</definition>
        <argsstring>(ValueType val)=0</argsstring>
        <name>SetValues</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a0cb9e9bf556bb5b6e375ebab7ddef750">SetValues</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a0d05ce53b50b21bbb2b80215c60acbdc">SetValues</reimplementedby>
        <param>
          <type>ValueType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all values of the vector to given argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1aed60d50ff54c05fd3e2227109b8d3588" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::SetRandomUniform</definition>
        <argsstring>(unsigned long long seed, ValueType a=static_cast&lt; ValueType &gt;(-1), ValueType b=static_cast&lt; ValueType &gt;(1))=0</argsstring>
        <name>SetRandomUniform</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1ab7fb7d3f1cc17ba065c64f9fc57769ee">SetRandomUniform</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a4a78f0acd7f8479717e811a032b1c36b">SetRandomUniform</reimplementedby>
        <param>
          <type>unsigned long long</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>a</declname>
          <defval>static_cast&lt; ValueType &gt;(-1)</defval>
        </param>
        <param>
          <type>ValueType</type>
          <declname>b</declname>
          <defval>static_cast&lt; ValueType &gt;(1)</defval>
        </param>
        <briefdescription>
<para>Fill the vector with random values from interval [a,b]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ac0bb252680207ce70ab871f371007e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::SetRandomNormal</definition>
        <argsstring>(unsigned long long seed, ValueType mean=static_cast&lt; ValueType &gt;(0), ValueType var=static_cast&lt; ValueType &gt;(1))=0</argsstring>
        <name>SetRandomNormal</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a6b4f089c92ce7885bcc867c806640cf0">SetRandomNormal</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a7385bcd27a52c94549a354799e23a7f9">SetRandomNormal</reimplementedby>
        <param>
          <type>unsigned long long</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>mean</declname>
          <defval>static_cast&lt; ValueType &gt;(0)</defval>
        </param>
        <param>
          <type>ValueType</type>
          <declname>var</declname>
          <defval>static_cast&lt; ValueType &gt;(1)</defval>
        </param>
        <briefdescription>
<para>Fill the vector with random values from normal distribution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a35cefceac2c827b6f4a422113b06f3b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::ReadFileASCII</definition>
        <argsstring>(const std::string filename)=0</argsstring>
        <name>ReadFileASCII</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a26597a91fbeac7b324f34e9c0af58582">ReadFileASCII</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a4f93a990c2b1a89bed6b8f69f965a729">ReadFileASCII</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a4f93a990c2b1a89bed6b8f69f965a729">ReadFileASCII</reimplementedby>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Read vector from ASCII file. </para>        </briefdescription>
        <detaileddescription>
<para>Read a vector from ASCII file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file containing the ASCII data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;ValueType&gt;<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">vec.ReadFileASCII(</highlight><highlight class="stringliteral">&quot;my_vector.dat&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1adf8762b6ad93bcc19b87675c63a67752" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::WriteFileASCII</definition>
        <argsstring>(const std::string filename) const =0</argsstring>
        <name>WriteFileASCII</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1acffd8199e0ee1ed21abfe66612a2e39e">WriteFileASCII</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1ae25cac3e31ae90cfb0ed6cd26a0b820c">WriteFileASCII</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1ae25cac3e31ae90cfb0ed6cd26a0b820c">WriteFileASCII</reimplementedby>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Write vector to ASCII file. </para>        </briefdescription>
        <detaileddescription>
<para>Write a vector to ASCII file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file to write the ASCII data to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;ValueType&gt;<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>and<sp/>fill<sp/>vec</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vec.WriteFileASCII(</highlight><highlight class="stringliteral">&quot;my_vector.dat&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ae669ca94b6b19929b2b8483063fc70d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::ReadFileBinary</definition>
        <argsstring>(const std::string filename)=0</argsstring>
        <name>ReadFileBinary</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a7f54dacddf4f3f5a615f7e2ac3b6a949">ReadFileBinary</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a3ab863a463e4bfd2b1fc172ed9103c29">ReadFileBinary</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a3ab863a463e4bfd2b1fc172ed9103c29">ReadFileBinary</reimplementedby>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Read vector from binary file. </para>        </briefdescription>
        <detaileddescription>
<para>Read a vector from binary file. For details on the format, see <ref refid="classrocalution_1_1_vector_1ae03e3d74cf727f69bb1a8ca5d87d1fa7" kindref="member">WriteFileBinary()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file containing the data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;ValueType&gt;<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">vec.ReadFileBinary(</highlight><highlight class="stringliteral">&quot;my_vector.bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ae03e3d74cf727f69bb1a8ca5d87d1fa7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::WriteFileBinary</definition>
        <argsstring>(const std::string filename) const =0</argsstring>
        <name>WriteFileBinary</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a8562871e61d54369093bccfcf7045666">WriteFileBinary</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a9c753058a01044c092079eade04d9fb1">WriteFileBinary</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a9c753058a01044c092079eade04d9fb1">WriteFileBinary</reimplementedby>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Write vector to binary file. </para>        </briefdescription>
        <detaileddescription>
<para>Write a vector to binary file.</para><para>The binary format contains a header, the rocALUTION version and the vector data as follows <programlisting><codeline><highlight class="comment">//<sp/>Header</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#rocALUTION<sp/>binary<sp/>vector<sp/>file&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>rocALUTION<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">out.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;version,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vector<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">out.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">out.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)vec_val,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para><ref refid="classrocalution_1_1_vector" kindref="compound">Vector</ref> values array is always stored in double precision (e.g. double or std::complex&lt;double&gt;).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file to write the data to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;ValueType&gt;<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>and<sp/>fill<sp/>vec</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vec.WriteFileBinary(</highlight><highlight class="stringliteral">&quot;my_vector.bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a19b74819ca4d2d4aba804b4b3882d33e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::CopyFromAsync</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;src)</argsstring>
        <name>CopyFromAsync</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a13217124fbe9532f6ef14ae160fd427d">CopyFromAsync</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Async copy from another local vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1af85033a1ee476fde1a8e595bf820aee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::CopyFromFloat</definition>
        <argsstring>(const LocalVector&lt; float &gt; &amp;src)</argsstring>
        <name>CopyFromFloat</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a4d0ef0ba1b9ba78136a71199a7a6b734">CopyFromFloat</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a4d0ef0ba1b9ba78136a71199a7a6b734">CopyFromFloat</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; float &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy values from another local float vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a602f35cbb92908373b7eee02a097f006" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::CopyFromDouble</definition>
        <argsstring>(const LocalVector&lt; double &gt; &amp;src)</argsstring>
        <name>CopyFromDouble</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a0910f630662262bb111c30de3e07815b">CopyFromDouble</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a0910f630662262bb111c30de3e07815b">CopyFromDouble</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; double &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy values from another local double vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a6a1781254d8a3d8a39c4624741babfb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::CopyFrom</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;src, int src_offset, int dst_offset, int size)</argsstring>
        <name>CopyFrom</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a54ca27df605bb2c1567e3387ae7d57de">CopyFrom</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Copy vector from another vector with offsets and size. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>CopyFrom</computeroutput> copies values with specific source and destination offsets and sizes from another vector.</para><para><simplesect kind="note"><para>This function allows cross platform copying. One of the objects could be allocated on the accelerator backend.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classrocalution_1_1_vector" kindref="compound">Vector</ref>, where values should be copied from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>source offset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>destination offset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of entries to be copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ae1f6dd2e39e233b808101a0072a1db62" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::AddScale</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;x, ValueType alpha)</argsstring>
        <name>AddScale</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a83e7f8e6a99c29cf727a0782e2674bba">AddScale</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Perform vector update of type this = this + alpha * x. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1aedf4d64ae2c3b8ee1f37519f306d0041" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::AddScale</definition>
        <argsstring>(const GlobalVector&lt; ValueType &gt; &amp;x, ValueType alpha)</argsstring>
        <name>AddScale</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a8c061e6f4715e9969861a08e6fce864f">AddScale</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Perform vector update of type this = this + alpha * x. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1aec3e1f31e60d088aa021160d12e3ecd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::ScaleAdd</definition>
        <argsstring>(ValueType alpha, const LocalVector&lt; ValueType &gt; &amp;x)</argsstring>
        <name>ScaleAdd</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a36c52c8148cdf904e89fabbb034246de">ScaleAdd</reimplementedby>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Perform vector update of type this = alpha * this + x. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a9edf57a13c5aa7a01e6f86d84f382e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::ScaleAdd</definition>
        <argsstring>(ValueType alpha, const GlobalVector&lt; ValueType &gt; &amp;x)</argsstring>
        <name>ScaleAdd</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a0324a2852ec0c5bf5dde665860a068d5">ScaleAdd</reimplementedby>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Perform vector update of type this = alpha * this + x. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a4927a1c7ed1b32a7c1bfaa5e8ba260e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::ScaleAddScale</definition>
        <argsstring>(ValueType alpha, const LocalVector&lt; ValueType &gt; &amp;x, ValueType beta)</argsstring>
        <name>ScaleAddScale</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1ad6f3ce6d5490f5a131eb6d417cdeea5b">ScaleAddScale</reimplementedby>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
<para>Perform vector update of type this = alpha * this + x * beta. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a390c2cc8415eaa3959622254194a48f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::ScaleAddScale</definition>
        <argsstring>(ValueType alpha, const GlobalVector&lt; ValueType &gt; &amp;x, ValueType beta)</argsstring>
        <name>ScaleAddScale</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1acdd79345b1ab83ca6b30e83136ff1003">ScaleAddScale</reimplementedby>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
<para>Perform vector update of type this = alpha * this + x * beta. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a7a14ed1246d3c835794c6c6f3a4b80c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::ScaleAddScale</definition>
        <argsstring>(ValueType alpha, const LocalVector&lt; ValueType &gt; &amp;x, ValueType beta, int src_offset, int dst_offset, int size)</argsstring>
        <name>ScaleAddScale</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a678bc1b7f566cca0f8548a4cc806d4f5">ScaleAddScale</reimplementedby>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Perform vector update of type this = alpha * this + x * beta with offsets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a4f710bdf88c54847a0c524715c129e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::ScaleAddScale</definition>
        <argsstring>(ValueType alpha, const GlobalVector&lt; ValueType &gt; &amp;x, ValueType beta, int src_offset, int dst_offset, int size)</argsstring>
        <name>ScaleAddScale</name>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Perform vector update of type this = alpha * this + x * beta with offsets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ace75caff6cab8ebcc6dbbbe10ac38fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::ScaleAdd2</definition>
        <argsstring>(ValueType alpha, const LocalVector&lt; ValueType &gt; &amp;x, ValueType beta, const LocalVector&lt; ValueType &gt; &amp;y, ValueType gamma)</argsstring>
        <name>ScaleAdd2</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a789b6b7874da73bdd5e6698fec222a91">ScaleAdd2</reimplementedby>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
<para>Perform vector update of type this = alpha * this + x * beta + y * gamma. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ae85d99b6f2ba4f0f072d3f2ce3c59ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::ScaleAdd2</definition>
        <argsstring>(ValueType alpha, const GlobalVector&lt; ValueType &gt; &amp;x, ValueType beta, const GlobalVector&lt; ValueType &gt; &amp;y, ValueType gamma)</argsstring>
        <name>ScaleAdd2</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a65839dc24fe2172f999ba5d1a1f37b25">ScaleAdd2</reimplementedby>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
<para>Perform vector update of type this = alpha * this + x * beta + y * gamma. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ad00973260f6b2ca585220060fa8f074c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::Scale</definition>
        <argsstring>(ValueType alpha)=0</argsstring>
        <name>Scale</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a03ecd5d92ee9b1b0b561b816cf6dca11">Scale</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a88b8838c303c6f0c43c763264fdad077">Scale</reimplementedby>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Perform vector scaling this = alpha * this. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a4b8794f97529984f9eb0be2532e7a452" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ValueType</type>
        <definition>virtual ValueType rocalution::Vector&lt; ValueType &gt;::Dot</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;x) const</argsstring>
        <name>Dot</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1abfe1184d8f1432b03e2b42546273f11d">Dot</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Compute dot (scalar) product, return this^T y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ab43c0f9c89802ced75ac7e3b248cc798" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ValueType</type>
        <definition>virtual ValueType rocalution::Vector&lt; ValueType &gt;::Dot</definition>
        <argsstring>(const GlobalVector&lt; ValueType &gt; &amp;x) const</argsstring>
        <name>Dot</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1acff4d26fb485147fa4d5fddbfc9e5261">Dot</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Compute dot (scalar) product, return this^T y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1afc0de1e6246fb0a5e9a6b0bbaf481727" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ValueType</type>
        <definition>virtual ValueType rocalution::Vector&lt; ValueType &gt;::DotNonConj</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;x) const</argsstring>
        <name>DotNonConj</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a5aa5910bdca4e1102e8d31af8d7e29a4">DotNonConj</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Compute non-conjugate dot (scalar) product, return this^T y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a6ff165b83b46e200e76cef9be9fc3505" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ValueType</type>
        <definition>virtual ValueType rocalution::Vector&lt; ValueType &gt;::DotNonConj</definition>
        <argsstring>(const GlobalVector&lt; ValueType &gt; &amp;x) const</argsstring>
        <name>DotNonConj</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a86be26351b1935e3595ac4ff64cb6d98">DotNonConj</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Compute non-conjugate dot (scalar) product, return this^T y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ae497a40ab0a3c1b7927e53b856775d96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>ValueType</type>
        <definition>virtual ValueType rocalution::Vector&lt; ValueType &gt;::Norm</definition>
        <argsstring>(void) const =0</argsstring>
        <name>Norm</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1ac50685032c64d2b20f37502e2a085c7f">Norm</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a1941030d968ef965f8cf2abb864cbd0d">Norm</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a1941030d968ef965f8cf2abb864cbd0d">Norm</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Compute <formula id="1">$L_2$</formula> norm of the vector, return = srqt(this^T this) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a2fdb72cd02801525457e9ada7dd60ef2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>ValueType</type>
        <definition>virtual ValueType rocalution::Vector&lt; ValueType &gt;::Reduce</definition>
        <argsstring>(void) const =0</argsstring>
        <name>Reduce</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a7c777dba889c54bf7d42257a8f3fd9db">Reduce</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a49e4cfe29ae2e155ff4b79d7e907b71c">Reduce</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a49e4cfe29ae2e155ff4b79d7e907b71c">Reduce</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reduce the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1adcd00282279cb53befa5b684cfe1b810" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>ValueType</type>
        <definition>virtual ValueType rocalution::Vector&lt; ValueType &gt;::Asum</definition>
        <argsstring>(void) const =0</argsstring>
        <name>Asum</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a02a2f9e333cbdc26c917321ee0e833b9">Asum</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a781d7827180d02a253b59698f6228863">Asum</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a781d7827180d02a253b59698f6228863">Asum</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Compute the sum of absolute values of the vector, return = sum(|this|) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ad12fff786a24c4d5fccb452dea303767" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int rocalution::Vector&lt; ValueType &gt;::Amax</definition>
        <argsstring>(ValueType &amp;value) const =0</argsstring>
        <name>Amax</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a0609a049872a62a5218a38e4187d3ef9">Amax</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a20c79273550b3a82a409ef3cbcbc7e6b">Amax</reimplementedby>
        <param>
          <type>ValueType &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Compute the absolute max of the vector, return = index(max(|this|)) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a228c4dbf9570eb0e3ac63abf02ec2192" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::PointWiseMult</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;x)</argsstring>
        <name>PointWiseMult</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1ac1369d49e5715c4b75e52ccca7f368a7">PointWiseMult</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Perform point-wise multiplication (element-wise) of this = this * x. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a3d32315bcad3563dd1d7b793890fbad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::PointWiseMult</definition>
        <argsstring>(const GlobalVector&lt; ValueType &gt; &amp;x)</argsstring>
        <name>PointWiseMult</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a7d6ca3d4ab5460695e39b77ffbf8bcc0">PointWiseMult</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Perform point-wise multiplication (element-wise) of this = this * x. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a994a38ea43f642b09d11803ba126ca21" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::PointWiseMult</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;x, const LocalVector&lt; ValueType &gt; &amp;y)</argsstring>
        <name>PointWiseMult</name>
        <reimplementedby refid="classrocalution_1_1_local_vector_1abc0e63a78bd3ca01505986783c815736">PointWiseMult</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Perform point-wise multiplication (element-wise) of this = x * y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1a5c540c12372d286b3de900937e0af809" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::PointWiseMult</definition>
        <argsstring>(const GlobalVector&lt; ValueType &gt; &amp;x, const GlobalVector&lt; ValueType &gt; &amp;y)</argsstring>
        <name>PointWiseMult</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1ab63d13d318613fdd27619f53ef8f8a63">PointWiseMult</reimplementedby>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_global_vector" kindref="compound">GlobalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Perform point-wise multiplication (element-wise) of this = x * y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_vector_1ae7401d8c41da9c2d9977eaa26f56a9cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rocalution::Vector&lt; ValueType &gt;::Power</definition>
        <argsstring>(double power)=0</argsstring>
        <name>Power</name>
        <reimplementedby refid="classrocalution_1_1_global_vector_1a6d5f5a56660fb6d970bae54be37d9162">Power</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a203456f8c05ce0af1993f9465f1908ac">Power</reimplementedby>
        <reimplementedby refid="classrocalution_1_1_local_vector_1a203456f8c05ce0af1993f9465f1908ac">Power</reimplementedby>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Perform power operation to a vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="350" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classrocalution_1_1_vector" kindref="compound">Vector</ref> class. </para>    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classrocalution_1_1_vector" kindref="compound">Vector</ref> class defines the generic interface for local and global vectors.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>- can be int, float, double, std::complex&lt;float&gt; and std::complex&lt;double&gt; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="859">
        <label>rocalution::BaseRocalution&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_base_rocalution"/>
        <childnode refid="860" relation="public-inheritance">
        </childnode>
      </node>
      <node id="861">
        <label>LocalVector&lt; int &gt;</label>
        <link refid="classrocalution_1_1_local_vector"/>
        <childnode refid="858" relation="public-inheritance">
        </childnode>
      </node>
      <node id="858">
        <label>rocalution::Vector&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_vector"/>
        <childnode refid="859" relation="public-inheritance">
        </childnode>
      </node>
      <node id="863">
        <label>rocalution::LocalVector&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_local_vector"/>
        <childnode refid="858" relation="public-inheritance">
        </childnode>
      </node>
      <node id="860">
        <label>rocalution::RocalutionObj</label>
      </node>
      <node id="862">
        <label>rocalution::GlobalVector&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_global_vector"/>
        <childnode refid="858" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="865">
        <label>rocalution::BaseRocalution&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_base_rocalution"/>
        <childnode refid="866" relation="public-inheritance">
        </childnode>
      </node>
      <node id="864">
        <label>rocalution::Vector&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_vector"/>
        <childnode refid="865" relation="public-inheritance">
        </childnode>
      </node>
      <node id="866">
        <label>rocalution::RocalutionObj</label>
      </node>
    </collaborationgraph>
    <location file="/home/tcs/rocALUTION/src/base/vector.hpp" line="52" column="1" bodyfile="/home/tcs/rocALUTION/src/base/vector.hpp" bodystart="51" bodyend="351"/>
    <listofallmembers>
      <member refid="classrocalution_1_1_vector_1ae1f6dd2e39e233b808101a0072a1db62" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>AddScale</name></member>
      <member refid="classrocalution_1_1_vector_1aedf4d64ae2c3b8ee1f37519f306d0041" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>AddScale</name></member>
      <member refid="classrocalution_1_1_vector_1ad12fff786a24c4d5fccb452dea303767" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Amax</name></member>
      <member refid="classrocalution_1_1_vector_1adcd00282279cb53befa5b684cfe1b810" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Asum</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1ad248c147237baaf809978dba69edf342" prot="public" virt="non-virtual"><scope>rocalution::Vector</scope><name>BaseRocalution</name></member>
      <member refid="classrocalution_1_1_vector_1afb8f27ffca2ff3d59995d56b7093330c" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Check</name></member>
      <member refid="classrocalution_1_1_vector_1af0cc06112714483ae4af25fba1e9bd04" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Clear</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a85acdb9844b7c6a630f14ace59d99f5d" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>CloneBackend</name></member>
      <member refid="classrocalution_1_1_vector_1a6c78a236e9c0b9ffefd237d8a76e5b8a" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>CloneFrom</name></member>
      <member refid="classrocalution_1_1_vector_1ab620189a4e55cd97bf86478ff0df6c3f" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>CloneFrom</name></member>
      <member refid="classrocalution_1_1_vector_1a0a69b9fd8f7263d1444c331e8ce18f8b" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>CopyFrom</name></member>
      <member refid="classrocalution_1_1_vector_1a32a36abf74009fabb2af1f5250649680" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>CopyFrom</name></member>
      <member refid="classrocalution_1_1_vector_1a6a1781254d8a3d8a39c4624741babfb4" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>CopyFrom</name></member>
      <member refid="classrocalution_1_1_vector_1a19b74819ca4d2d4aba804b4b3882d33e" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>CopyFromAsync</name></member>
      <member refid="classrocalution_1_1_vector_1a602f35cbb92908373b7eee02a097f006" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>CopyFromDouble</name></member>
      <member refid="classrocalution_1_1_vector_1af85033a1ee476fde1a8e595bf820aee7" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>CopyFromFloat</name></member>
      <member refid="classrocalution_1_1_vector_1a4b8794f97529984f9eb0be2532e7a452" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>Dot</name></member>
      <member refid="classrocalution_1_1_vector_1ab43c0f9c89802ced75ac7e3b248cc798" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>Dot</name></member>
      <member refid="classrocalution_1_1_vector_1afc0de1e6246fb0a5e9a6b0bbaf481727" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>DotNonConj</name></member>
      <member refid="classrocalution_1_1_vector_1a6ff165b83b46e200e76cef9be9fc3505" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>DotNonConj</name></member>
      <member refid="classrocalution_1_1_vector_1abd0787513f949d91f445890ea4d2ce81" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>GetGhostSize</name></member>
      <member refid="classrocalution_1_1_vector_1af4e80d10bbfd9a243d0dfa3a5481358c" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>GetLocalSize</name></member>
      <member refid="classrocalution_1_1_vector_1a69a7295c57e35e030999c5764c05cfe7" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>GetSize</name></member>
      <member refid="classrocalution_1_1_rocalution_obj_1a4bba5aeaf4fd705efc00402f1f6ed40b" prot="protected" virt="non-virtual"><scope>rocalution::Vector</scope><name>global_obj_id_</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a62720e4ccdd3879dcf093abc2688076e" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Info</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a3fd4724cb23b135d6b6528674c3aec14" prot="protected" virt="pure-virtual"><scope>rocalution::Vector</scope><name>is_accel_</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a4bf61bf87e25d66b63187e21d00e4f2d" prot="protected" virt="pure-virtual"><scope>rocalution::Vector</scope><name>is_host_</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a2238fc9adc895dff8744a5e470b79282" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>MoveToAccelerator</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a1c37dbcf976261be544dc6c66502182a" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>MoveToAcceleratorAsync</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a4e572619edf6570b746c263e3b9e82e9" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>MoveToHost</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a6491e18ff3f4809b42c3c3c94d1bc1f2" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>MoveToHostAsync</name></member>
      <member refid="classrocalution_1_1_vector_1ae497a40ab0a3c1b7927e53b856775d96" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Norm</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a5d818c77bc906d543c44d441bb589b46" prot="protected" virt="non-virtual"><scope>rocalution::Vector</scope><name>object_name_</name></member>
      <member refid="classrocalution_1_1_vector_1aa979fabb41b06ca0413ca44fa8ffe714" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Ones</name></member>
      <member refid="classrocalution_1_1_vector_1a228c4dbf9570eb0e3ac63abf02ec2192" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>PointWiseMult</name></member>
      <member refid="classrocalution_1_1_vector_1a3d32315bcad3563dd1d7b793890fbad6" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>PointWiseMult</name></member>
      <member refid="classrocalution_1_1_vector_1a994a38ea43f642b09d11803ba126ca21" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>PointWiseMult</name></member>
      <member refid="classrocalution_1_1_vector_1a5c540c12372d286b3de900937e0af809" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>PointWiseMult</name></member>
      <member refid="classrocalution_1_1_vector_1ae7401d8c41da9c2d9977eaa26f56a9cc" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Power</name></member>
      <member refid="classrocalution_1_1_vector_1a35cefceac2c827b6f4a422113b06f3b5" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>ReadFileASCII</name></member>
      <member refid="classrocalution_1_1_vector_1ae669ca94b6b19929b2b8483063fc70d3" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>ReadFileBinary</name></member>
      <member refid="classrocalution_1_1_vector_1a2fdb72cd02801525457e9ada7dd60ef2" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Reduce</name></member>
      <member refid="classrocalution_1_1_rocalution_obj_1ad60a8b2047aad74e488c552264fa7737" prot="public" virt="non-virtual"><scope>rocalution::Vector</scope><name>RocalutionObj</name></member>
      <member refid="classrocalution_1_1_vector_1ad00973260f6b2ca585220060fa8f074c" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Scale</name></member>
      <member refid="classrocalution_1_1_vector_1aec3e1f31e60d088aa021160d12e3ecd7" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>ScaleAdd</name></member>
      <member refid="classrocalution_1_1_vector_1a9edf57a13c5aa7a01e6f86d84f382e66" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>ScaleAdd</name></member>
      <member refid="classrocalution_1_1_vector_1ace75caff6cab8ebcc6dbbbe10ac38fad" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>ScaleAdd2</name></member>
      <member refid="classrocalution_1_1_vector_1ae85d99b6f2ba4f0f072d3f2ce3c59ea4" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>ScaleAdd2</name></member>
      <member refid="classrocalution_1_1_vector_1a4927a1c7ed1b32a7c1bfaa5e8ba260e2" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>ScaleAddScale</name></member>
      <member refid="classrocalution_1_1_vector_1a390c2cc8415eaa3959622254194a48f8" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>ScaleAddScale</name></member>
      <member refid="classrocalution_1_1_vector_1a7a14ed1246d3c835794c6c6f3a4b80c1" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>ScaleAddScale</name></member>
      <member refid="classrocalution_1_1_vector_1a4f710bdf88c54847a0c524715c129e83" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>ScaleAddScale</name></member>
      <member refid="classrocalution_1_1_vector_1ac0bb252680207ce70ab871f371007e5a" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>SetRandomNormal</name></member>
      <member refid="classrocalution_1_1_vector_1aed60d50ff54c05fd3e2227109b8d3588" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>SetRandomUniform</name></member>
      <member refid="classrocalution_1_1_vector_1a3df2b00c6da1ac2f35a577a31cbe98b1" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>SetValues</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a67986dbebc9b025e6ac30be4f85f784b" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>Sync</name></member>
      <member refid="classrocalution_1_1_vector_1ab7cc8dac1aaae183de2a26b9f2e891a1" prot="public" virt="non-virtual"><scope>rocalution::Vector</scope><name>Vector</name></member>
      <member refid="classrocalution_1_1_vector_1adf8762b6ad93bcc19b87675c63a67752" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>WriteFileASCII</name></member>
      <member refid="classrocalution_1_1_vector_1ae03e3d74cf727f69bb1a8ca5d87d1fa7" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>WriteFileBinary</name></member>
      <member refid="classrocalution_1_1_vector_1ac61cd2a27428d8cb0b7325697ab54883" prot="public" virt="pure-virtual"><scope>rocalution::Vector</scope><name>Zeros</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1aad8ac3188091c4683181bfe6d739b7fd" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>~BaseRocalution</name></member>
      <member refid="classrocalution_1_1_rocalution_obj_1a55a2f93f798cebdda6343b20db959e2d" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>~RocalutionObj</name></member>
      <member refid="classrocalution_1_1_vector_1a1a5d1bd49e7ce33f80f1f71e9e681818" prot="public" virt="virtual"><scope>rocalution::Vector</scope><name>~Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
