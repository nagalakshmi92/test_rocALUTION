<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classrocalution_1_1_local_matrix" kind="class" language="C++" prot="public">
    <compoundname>rocalution::LocalMatrix</compoundname>
    <basecompoundref refid="classrocalution_1_1_operator" prot="public" virt="non-virtual">rocalution::Operator&lt; ValueType &gt;</basecompoundref>
    <includes refid="local__matrix_8hpp" local="no">local_matrix.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>ValueType</declname>
        <defname>ValueType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a9e2262ffb6ec53e72ebe079803616c67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AllocateCSR</definition>
        <argsstring>(const std::string name, int nnz, int nrow, int ncol)</argsstring>
        <name>AllocateCSR</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
<para>Allocate a local matrix with name and sizes. </para>        </briefdescription>
        <detaileddescription>
<para>The local matrix allocation functions require a name of the object (this is only for information purposes) and corresponding number of non-zero elements, number of rows and number of columns. Furthermore, depending on the matrix format, additional parameters are required.</para><para><simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalMatrix&lt;ValueType&gt;<sp/>mat;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.AllocateCSR(</highlight><highlight class="stringliteral">&quot;my<sp/>CSR<sp/>matrix&quot;</highlight><highlight class="normal">,<sp/>456,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">mat.Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.AllocateCOO(</highlight><highlight class="stringliteral">&quot;my<sp/>COO<sp/>matrix&quot;</highlight><highlight class="normal">,<sp/>200,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">mat.Clear();</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a83eeb71afdf68f0aa91eadc46143034b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AllocateBCSR</definition>
        <argsstring>(void)</argsstring>
        <name>AllocateBCSR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="103" column="1" bodyfile="/home/tcs/rocALUTION/src/base/local_matrix.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1af3e1c51e650ffad760b7dbfc508bd80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AllocateMCSR</definition>
        <argsstring>(const std::string name, int nnz, int nrow, int ncol)</argsstring>
        <name>AllocateMCSR</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a5f8a0ce95e3c24b68dbc272bf0b979ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AllocateCOO</definition>
        <argsstring>(const std::string name, int nnz, int nrow, int ncol)</argsstring>
        <name>AllocateCOO</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ac22ce8c62c7f96aaf81f0ca252550d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AllocateDIA</definition>
        <argsstring>(const std::string name, int nnz, int nrow, int ncol, int ndiag)</argsstring>
        <name>AllocateDIA</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndiag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1acb5702157228a7cf509d518ed85023a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AllocateELL</definition>
        <argsstring>(const std::string name, int nnz, int nrow, int ncol, int max_row)</argsstring>
        <name>AllocateELL</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a0f11424c97e09672c909d457d06cbccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AllocateHYB</definition>
        <argsstring>(const std::string name, int ell_nnz, int coo_nnz, int ell_max_row, int nrow, int ncol)</argsstring>
        <name>AllocateHYB</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ell_nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coo_nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ell_max_row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a0c79cf8ba3bcb18cfa5790bfcf874ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AllocateDENSE</definition>
        <argsstring>(const std::string name, int nrow, int ncol)</argsstring>
        <name>AllocateDENSE</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="110" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1acdfeb3a318104a38a539ce2e14497346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::SetDataPtrCOO</definition>
        <argsstring>(int **row, int **col, ValueType **val, std::string name, int nnz, int nrow, int ncol)</argsstring>
        <name>SetDataPtrCOO</name>
        <param>
          <type>int **</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>col</declname>
        </param>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref> on the host with externally allocated data. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>SetDataPtr</computeroutput> functions have direct access to the raw data via pointers. Already allocated data can be set by passing their pointers.</para><para><simplesect kind="note"><para>Setting data pointers will leave the original pointers empty (set to <computeroutput>NULL</computeroutput>).</para></simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>CSR<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>csr_row_ptr<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[100<sp/>+<sp/>1];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>csr_col_ind<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[345];</highlight></codeline>
<codeline><highlight class="normal">ValueType*<sp/>csr_val<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ValueType[345];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>CSR<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>rocALUTION<sp/>local<sp/>matrix<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">LocalMatrix&lt;ValueType&gt;<sp/>mat;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>CSR<sp/>matrix<sp/>data,<sp/>csr_row_ptr,<sp/>csr_col<sp/>and<sp/>csr_val<sp/>pointers<sp/>become</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.SetDataPtrCSR(&amp;csr_row_ptr,<sp/>&amp;csr_col,<sp/>&amp;csr_val,<sp/></highlight><highlight class="stringliteral">&quot;my_matrix&quot;</highlight><highlight class="normal">,<sp/>345,<sp/>100,<sp/>100);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ac4d2555ce3f1b82bedfbcd8d80a9990f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::SetDataPtrCSR</definition>
        <argsstring>(int **row_offset, int **col, ValueType **val, std::string name, int nnz, int nrow, int ncol)</argsstring>
        <name>SetDataPtrCSR</name>
        <param>
          <type>int **</type>
          <declname>row_offset</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>col</declname>
        </param>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aa5213597d99fc349aac27a72d1b26f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::SetDataPtrMCSR</definition>
        <argsstring>(int **row_offset, int **col, ValueType **val, std::string name, int nnz, int nrow, int ncol)</argsstring>
        <name>SetDataPtrMCSR</name>
        <param>
          <type>int **</type>
          <declname>row_offset</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>col</declname>
        </param>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1af7e5a78d103a2471cef1f1d59f011492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::SetDataPtrELL</definition>
        <argsstring>(int **col, ValueType **val, std::string name, int nnz, int nrow, int ncol, int max_row)</argsstring>
        <name>SetDataPtrELL</name>
        <param>
          <type>int **</type>
          <declname>col</declname>
        </param>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a0f2ba4a64a7dbcb539b4e553ac8f1fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::SetDataPtrDIA</definition>
        <argsstring>(int **offset, ValueType **val, std::string name, int nnz, int nrow, int ncol, int num_diag)</argsstring>
        <name>SetDataPtrDIA</name>
        <param>
          <type>int **</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_diag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a7094a60209b0a690c9046357c841cac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::SetDataPtrDENSE</definition>
        <argsstring>(ValueType **val, std::string name, int nrow, int ncol)</argsstring>
        <name>SetDataPtrDENSE</name>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="160" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a9763c9317b9e3cee8410f79f54c879d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LeaveDataPtrCOO</definition>
        <argsstring>(int **row, int **col, ValueType **val)</argsstring>
        <name>LeaveDataPtrCOO</name>
        <param>
          <type>int **</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>col</declname>
        </param>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Leave a <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref> to host pointers. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>LeaveDataPtr</computeroutput> functions have direct access to the raw data via pointers. A <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref> object can leave its raw data to host pointers. This will leave the <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref> empty.</para><para><simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="comment">//<sp/>rocALUTION<sp/>CSR<sp/>matrix<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">LocalMatrix&lt;ValueType&gt;<sp/>mat;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>the<sp/>CSR<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.AllocateCSR(</highlight><highlight class="stringliteral">&quot;my_matrix&quot;</highlight><highlight class="normal">,<sp/>345,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fill<sp/>CSR<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>csr_row_ptr<sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>csr_col_ind<sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">ValueType*<sp/>csr_val<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>(steal)<sp/>the<sp/>data<sp/>from<sp/>the<sp/>matrix,<sp/>this<sp/>will<sp/>leave<sp/>the<sp/>local<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>object<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.LeaveDataPtrCSR(&amp;csr_row_ptr,<sp/>&amp;csr_col_ind,<sp/>&amp;csr_val);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ad67e42bdef63ec1d31d51391edb71f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LeaveDataPtrCSR</definition>
        <argsstring>(int **row_offset, int **col, ValueType **val)</argsstring>
        <name>LeaveDataPtrCSR</name>
        <param>
          <type>int **</type>
          <declname>row_offset</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>col</declname>
        </param>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a1ac5d3d11c02ed8f2bb288c39a29f108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LeaveDataPtrMCSR</definition>
        <argsstring>(int **row_offset, int **col, ValueType **val)</argsstring>
        <name>LeaveDataPtrMCSR</name>
        <param>
          <type>int **</type>
          <declname>row_offset</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>col</declname>
        </param>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1acd943926268fb9ddf641df08bb45069b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LeaveDataPtrELL</definition>
        <argsstring>(int **col, ValueType **val, int &amp;max_row)</argsstring>
        <name>LeaveDataPtrELL</name>
        <param>
          <type>int **</type>
          <declname>col</declname>
        </param>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>max_row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ae4214ba5874900000d5455e511010d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LeaveDataPtrDIA</definition>
        <argsstring>(int **offset, ValueType **val, int &amp;num_diag)</argsstring>
        <name>LeaveDataPtrDIA</name>
        <param>
          <type>int **</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>num_diag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a396f929bbd45cba276a1e0ef8f9adece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LeaveDataPtrDENSE</definition>
        <argsstring>(ValueType **val)</argsstring>
        <name>LeaveDataPtrDENSE</name>
        <param>
          <type>ValueType **</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="195" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrocalution_1_1_local_matrix_1a7d4a43dd8c29abce9387e5be3f8dbc70" prot="private" static="no" mutable="no">
        <type><ref refid="classrocalution_1_1_base_matrix" kindref="compound">BaseMatrix</ref>&lt; ValueType &gt; *</type>
        <definition>BaseMatrix&lt;ValueType&gt;* rocalution::LocalMatrix&lt; ValueType &gt;::matrix_</definition>
        <argsstring></argsstring>
        <name>matrix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="849" column="1" bodyfile="/home/tcs/rocALUTION/src/base/local_matrix.hpp" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrocalution_1_1_local_matrix_1a58a64cee344cbb36cc3e623e89b83da8" prot="private" static="no" mutable="no">
        <type><ref refid="classrocalution_1_1_host_matrix" kindref="compound">HostMatrix</ref>&lt; ValueType &gt; *</type>
        <definition>HostMatrix&lt;ValueType&gt;* rocalution::LocalMatrix&lt; ValueType &gt;::matrix_host_</definition>
        <argsstring></argsstring>
        <name>matrix_host_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="852" column="1" bodyfile="/home/tcs/rocALUTION/src/base/local_matrix.hpp" bodystart="852" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrocalution_1_1_local_matrix_1af98059809e70d04387b74f5ca2193ee5" prot="private" static="no" mutable="no">
        <type><ref refid="classrocalution_1_1_accelerator_matrix" kindref="compound">AcceleratorMatrix</ref>&lt; ValueType &gt; *</type>
        <definition>AcceleratorMatrix&lt;ValueType&gt;* rocalution::LocalMatrix&lt; ValueType &gt;::matrix_accel_</definition>
        <argsstring></argsstring>
        <name>matrix_accel_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="855" column="1" bodyfile="/home/tcs/rocALUTION/src/base/local_matrix.hpp" bodystart="855" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classrocalution_1_1_local_matrix_1a4332e063cc6b7350ea0ba7b29dbec2c5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class LocalVector&lt; ValueType &gt;</definition>
        <argsstring></argsstring>
        <name>LocalVector&lt; ValueType &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="855" column="1" bodyfile="/home/tcs/rocALUTION/src/base/local_matrix.hpp" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classrocalution_1_1_local_matrix_1ad50ce751e5dafbeb3ca73c65cd542fce" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class GlobalVector&lt; ValueType &gt;</definition>
        <argsstring></argsstring>
        <name>GlobalVector&lt; ValueType &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="855" column="1" bodyfile="/home/tcs/rocALUTION/src/base/local_matrix.hpp" bodystart="858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classrocalution_1_1_local_matrix_1a350700fdc95d2918442f14af47bb3ff4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class GlobalMatrix&lt; ValueType &gt;</definition>
        <argsstring></argsstring>
        <name>GlobalMatrix&lt; ValueType &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="855" column="1" bodyfile="/home/tcs/rocALUTION/src/base/local_matrix.hpp" bodystart="859" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a24693e40cc06b807cec974b4fb7c0f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rocalution::LocalMatrix&lt; ValueType &gt;::LocalMatrix</definition>
        <argsstring>()</argsstring>
        <name>LocalMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a30380ef77093ef355c8d666401833c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual rocalution::LocalMatrix&lt; ValueType &gt;::~LocalMatrix</definition>
        <argsstring>()</argsstring>
        <name>~LocalMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a8f66294a7f7bf412dc44acdd6850e061" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::LocalMatrix&lt; ValueType &gt;::Info</definition>
        <argsstring>(void) const</argsstring>
        <name>Info</name>
        <reimplements refid="classrocalution_1_1_base_rocalution_1a62720e4ccdd3879dcf093abc2688076e">Info</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Print object information. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>Info</computeroutput> can print object information about any rocALUTION object. This information consists of object properties and backend data.</para><para><simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">mat.Info();</highlight></codeline>
<codeline><highlight class="normal">vec.Info();</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a0a077e9b521fc8af41c7f18de1cad1d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int rocalution::LocalMatrix&lt; ValueType &gt;::GetFormat</definition>
        <argsstring>(void) const</argsstring>
        <name>GetFormat</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return the matrix format id (see matrix_formats.hpp) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aeb0c36e210a0bbbc835874b5bac6437f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>IndexType2</type>
        <definition>virtual IndexType2 rocalution::LocalMatrix&lt; ValueType &gt;::GetM</definition>
        <argsstring>(void) const</argsstring>
        <name>GetM</name>
        <reimplements refid="classrocalution_1_1_operator_1a6af0e81191e63d15e95b227cd9129c87">GetM</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return the number of rows in the matrix/stencil. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1af87c058edc0aadb0b0c8b026f8d9b00a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>IndexType2</type>
        <definition>virtual IndexType2 rocalution::LocalMatrix&lt; ValueType &gt;::GetN</definition>
        <argsstring>(void) const</argsstring>
        <name>GetN</name>
        <reimplements refid="classrocalution_1_1_operator_1ac155a69301db3035abcd3beac9dbe7ce">GetN</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return the number of columns in the matrix/stencil. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1afab6feb71269348bb0665338f167ac16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>IndexType2</type>
        <definition>virtual IndexType2 rocalution::LocalMatrix&lt; ValueType &gt;::GetNnz</definition>
        <argsstring>(void) const</argsstring>
        <name>GetNnz</name>
        <reimplements refid="classrocalution_1_1_operator_1af834a59b334d754e5e803bd6561b675d">GetNnz</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return the number of non-zeros in the matrix/stencil. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a69e093022f1ccd32d046422c4e6196f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rocalution::LocalMatrix&lt; ValueType &gt;::Check</definition>
        <argsstring>(void) const</argsstring>
        <name>Check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Perform a sanity check of the matrix. </para>        </briefdescription>
        <detaileddescription>
<para>Checks, if the matrix contains valid data, i.e. if the values are not infinity and not NaN (not a number) and if the structure of the matrix is correct (e.g. indices cannot be negative, CSR and COO matrices have to be sorted, etc.).</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if the matrix is ok (empty matrix is also ok). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is something wrong with the structure or values. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a8df7184b26588a0d06d6c65a53fd7a73" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Clear</definition>
        <argsstring>(void)</argsstring>
        <name>Clear</name>
        <reimplements refid="classrocalution_1_1_base_rocalution_1a97c33fd007833bd22cd3ce142cebe06b">Clear</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear (free all data) the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a7218681c7054a12aae6057d96d3a4e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Zeros</definition>
        <argsstring>(void)</argsstring>
        <name>Zeros</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set all matrix values to zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aeabad9b79068c70637ef311af34af61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Scale</definition>
        <argsstring>(ValueType alpha)</argsstring>
        <name>Scale</name>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Scale all values in the matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a8fb80b66e03ea77d2f74862e10fd90dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ScaleDiagonal</definition>
        <argsstring>(ValueType alpha)</argsstring>
        <name>ScaleDiagonal</name>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Scale the diagonal entries of the matrix with alpha, all diagonal elements must exist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ae5e6d84270b2e8a878134507a086dbf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ScaleOffDiagonal</definition>
        <argsstring>(ValueType alpha)</argsstring>
        <name>ScaleOffDiagonal</name>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Scale the off-diagonal entries of the matrix with alpha, all diagonal elements must exist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aae36bb533533cfa66a8be5ef2cca9d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AddScalar</definition>
        <argsstring>(ValueType alpha)</argsstring>
        <name>AddScalar</name>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Add a scalar to all matrix values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a6356bb9437e4d2c0f497a9180af4dc42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AddScalarDiagonal</definition>
        <argsstring>(ValueType alpha)</argsstring>
        <name>AddScalarDiagonal</name>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Add alpha to the diagonal entries of the matrix, all diagonal elements must exist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a0b3eebe052f2084d66987e0a3cea2951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AddScalarOffDiagonal</definition>
        <argsstring>(ValueType alpha)</argsstring>
        <name>AddScalarOffDiagonal</name>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Add alpha to the off-diagonal entries of the matrix, all diagonal elements must exist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aedb177d0e93bae5b39de9658ba9c94a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ExtractSubMatrix</definition>
        <argsstring>(int row_offset, int col_offset, int row_size, int col_size, LocalMatrix&lt; ValueType &gt; *mat) const</argsstring>
        <name>ExtractSubMatrix</name>
        <param>
          <type>int</type>
          <declname>row_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col_size</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Extract a sub-matrix with row/col_offset and row/col_size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a7811d26ca30b8ec442565efe312d2d3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ExtractSubMatrices</definition>
        <argsstring>(int row_num_blocks, int col_num_blocks, const int *row_offset, const int *col_offset, LocalMatrix&lt; ValueType &gt; ***mat) const</argsstring>
        <name>ExtractSubMatrices</name>
        <param>
          <type>int</type>
          <declname>row_num_blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col_num_blocks</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>row_offset</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>col_offset</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; ***</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Extract array of non-overlapping sub-matrices (row/col_num_blocks define the blocks for rows/columns; row/col_offset have sizes col/row_num_blocks+1, where [i+1]-[i] defines the i-th size of the sub-matrix) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1af8468d33ff07d255428536d6ddb5ac43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ExtractDiagonal</definition>
        <argsstring>(LocalVector&lt; ValueType &gt; *vec_diag) const</argsstring>
        <name>ExtractDiagonal</name>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>vec_diag</declname>
        </param>
        <briefdescription>
<para>Extract the diagonal values of the matrix into a <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aaeec31daa2a51742f5c561cf22997c39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ExtractInverseDiagonal</definition>
        <argsstring>(LocalVector&lt; ValueType &gt; *vec_inv_diag) const</argsstring>
        <name>ExtractInverseDiagonal</name>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>vec_inv_diag</declname>
        </param>
        <briefdescription>
<para>Extract the inverse (reciprocal) diagonal values of the matrix into a <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aaa37a2beb38374a8b0dff4ba91080fd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ExtractU</definition>
        <argsstring>(LocalMatrix&lt; ValueType &gt; *U, bool diag) const</argsstring>
        <name>ExtractU</name>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
<para>Extract the upper triangular matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a00138976889bc73fa21db16a9c209daf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ExtractL</definition>
        <argsstring>(LocalMatrix&lt; ValueType &gt; *L, bool diag) const</argsstring>
        <name>ExtractL</name>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
<para>Extract the lower triangular matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1afc9486fee8f49d50db5c6cf49593aace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Permute</definition>
        <argsstring>(const LocalVector&lt; int &gt; &amp;permutation)</argsstring>
        <name>Permute</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; &amp;</type>
          <declname>permutation</declname>
        </param>
        <briefdescription>
<para>Perform (forward) permutation of the matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a0648ae8c06a0c0bcff3eda554eb168a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::PermuteBackward</definition>
        <argsstring>(const LocalVector&lt; int &gt; &amp;permutation)</argsstring>
        <name>PermuteBackward</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; &amp;</type>
          <declname>permutation</declname>
        </param>
        <briefdescription>
<para>Perform (backward) permutation of the matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a14788d661ea22a00f7a74601e132bb50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CMK</definition>
        <argsstring>(LocalVector&lt; int &gt; *permutation) const</argsstring>
        <name>CMK</name>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>permutation</declname>
        </param>
        <briefdescription>
<para>Create permutation vector for CMK reordering of the matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The Cuthill-McKee ordering minimize the bandwidth of a given sparse matrix.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>permutation vector for CMK reordering</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;int&gt;<sp/>cmk;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.CMK(&amp;cmk);</highlight></codeline>
<codeline><highlight class="normal">mat.Permute(cmk);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aaed8576707da922ffa1107f1ce427052" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::RCMK</definition>
        <argsstring>(LocalVector&lt; int &gt; *permutation) const</argsstring>
        <name>RCMK</name>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>permutation</declname>
        </param>
        <briefdescription>
<para>Create permutation vector for reverse CMK reordering of the matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The Reverse Cuthill-McKee ordering minimize the bandwidth of a given sparse matrix.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>permutation vector for reverse CMK reordering</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;int&gt;<sp/>rcmk;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.RCMK(&amp;rcmk);</highlight></codeline>
<codeline><highlight class="normal">mat.Permute(rcmk);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a433a6b2f5e09f3260b269776e8322a4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ConnectivityOrder</definition>
        <argsstring>(LocalVector&lt; int &gt; *permutation) const</argsstring>
        <name>ConnectivityOrder</name>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>permutation</declname>
        </param>
        <briefdescription>
<para>Create permutation vector for connectivity reordering of the matrix. </para>        </briefdescription>
        <detaileddescription>
<para>Connectivity ordering returns a permutation, that sorts the matrix by non-zero entries per row.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>permutation vector for connectivity reordering</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;int&gt;<sp/>conn;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.ConnectivityOrder(&amp;conn);</highlight></codeline>
<codeline><highlight class="normal">mat.Permute(conn);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a55000bad263b499ab9638ec95b852a1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::MultiColoring</definition>
        <argsstring>(int &amp;num_colors, int **size_colors, LocalVector&lt; int &gt; *permutation) const</argsstring>
        <name>MultiColoring</name>
        <param>
          <type>int &amp;</type>
          <declname>num_colors</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>size_colors</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>permutation</declname>
        </param>
        <briefdescription>
<para>Perform multi-coloring decomposition of the matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The Multi-Coloring algorithm builds a permutation (coloring of the matrix) in a way such that no two adjacent nodes in the sparse matrix have the same color.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">num_colors</parametername>
</parameternamelist>
<parameterdescription>
<para>number of colors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">size_colors</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to array that holds the number of nodes for each color </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>permutation vector for multi-coloring reordering</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;int&gt;<sp/>mc;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_colors;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>block_colors<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.MultiColoring(num_colors,<sp/>&amp;block_colors,<sp/>&amp;mc);</highlight></codeline>
<codeline><highlight class="normal">mat.Permute(mc);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ac8448fee69b9c9be5335083878ae5aa9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::MaximalIndependentSet</definition>
        <argsstring>(int &amp;size, LocalVector&lt; int &gt; *permutation) const</argsstring>
        <name>MaximalIndependentSet</name>
        <param>
          <type>int &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>permutation</declname>
        </param>
        <briefdescription>
<para>Perform maximal independent set decomposition of the matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The Maximal Independent Set algorithm finds a set with maximal size, that contains elements that do not depend on other elements in this set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of independent sets </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>permutation vector for maximal independent set reordering</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;int&gt;<sp/>mis;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.MaximalIndependentSet(size,<sp/>&amp;mis);</highlight></codeline>
<codeline><highlight class="normal">mat.Permute(mis);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a378871e3f6570a110c844d4b77fdb5c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ZeroBlockPermutation</definition>
        <argsstring>(int &amp;size, LocalVector&lt; int &gt; *permutation) const</argsstring>
        <name>ZeroBlockPermutation</name>
        <param>
          <type>int &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>permutation</declname>
        </param>
        <briefdescription>
<para>Return a permutation for saddle-point problems (zero diagonal entries) </para>        </briefdescription>
        <detaileddescription>
<para>For Saddle-Point problems, (i.e. matrices with zero diagonal entries), the Zero Block Permutation maps all zero-diagonal elements to the last block of the matrix.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">size</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">permutation</parametername>
</parameternamelist>
<parameterdescription>
<para>permutation vector for zero block permutation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalVector&lt;int&gt;<sp/>zbp;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.ZeroBlockPermutation(size,<sp/>&amp;zbp);</highlight></codeline>
<codeline><highlight class="normal">mat.Permute(zbp);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ac94a0833f8c29fee3d4a9019f9b923bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ILU0Factorize</definition>
        <argsstring>(void)</argsstring>
        <name>ILU0Factorize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Perform ILU(0) factorization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a2d32b530636d756b878c5ff3ba08df99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LUFactorize</definition>
        <argsstring>(void)</argsstring>
        <name>LUFactorize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Perform <ref refid="classrocalution_1_1_l_u" kindref="compound">LU</ref> factorization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a61ba9e4902f01289697ae7f8e26b57b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ILUTFactorize</definition>
        <argsstring>(double t, int maxrow)</argsstring>
        <name>ILUTFactorize</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxrow</declname>
        </param>
        <briefdescription>
<para>Perform ILU(t,m) factorization based on threshold and maximum number of elements per row. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a73e4e1d4f189884f9c428c3c2dad0da6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ILUpFactorize</definition>
        <argsstring>(int p, bool level=true)</argsstring>
        <name>ILUpFactorize</name>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>level</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Perform ILU(p) factorization based on power. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ac731fe03bccfebcbd70feabdb144e0d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LUAnalyse</definition>
        <argsstring>(void)</argsstring>
        <name>LUAnalyse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Analyse the structure (level-scheduling) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a5e9eaaca1b947c97cd9069fbc80b7f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LUAnalyseClear</definition>
        <argsstring>(void)</argsstring>
        <name>LUAnalyseClear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Delete the analysed data (see LUAnalyse) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a353e62f96359c56f26d3c22e642b019e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LUSolve</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;in, LocalVector&lt; ValueType &gt; *out) const</argsstring>
        <name>LUSolve</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Solve <ref refid="classrocalution_1_1_l_u" kindref="compound">LU</ref> out = in; if level-scheduling algorithm is provided then the graph traversing is performed in parallel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a4ca38ea117584b77253a9a116fb03440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ICFactorize</definition>
        <argsstring>(LocalVector&lt; ValueType &gt; *inv_diag)</argsstring>
        <name>ICFactorize</name>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>inv_diag</declname>
        </param>
        <briefdescription>
<para>Perform IC(0) factorization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a3536ca2f5595ab309fcda32d07e011fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LLAnalyse</definition>
        <argsstring>(void)</argsstring>
        <name>LLAnalyse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Analyse the structure (level-scheduling) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aa707f4992b07d0775840a8346c680e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LLAnalyseClear</definition>
        <argsstring>(void)</argsstring>
        <name>LLAnalyseClear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Delete the analysed data (see LLAnalyse) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a58c25b8be2b7889b1a7e649e6432d967" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LLSolve</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;in, LocalVector&lt; ValueType &gt; *out) const</argsstring>
        <name>LLSolve</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Solve LL^T out = in; if level-scheduling algorithm is provided then the graph traversing is performed in parallel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a1cb66ea276d6420861757557092e5b43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LLSolve</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;in, const LocalVector&lt; ValueType &gt; &amp;inv_diag, LocalVector&lt; ValueType &gt; *out) const</argsstring>
        <name>LLSolve</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>inv_diag</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Solve LL^T out = in; if level-scheduling algorithm is provided then the graph traversing is performed in parallel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a8d45e8ee1a1982d8041bf826d245fef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LAnalyse</definition>
        <argsstring>(bool diag_unit=false)</argsstring>
        <name>LAnalyse</name>
        <param>
          <type>bool</type>
          <declname>diag_unit</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Analyse the structure (level-scheduling) L-part. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>diag_unit == true the diag is 1;</para></listitem><listitem><para>diag_unit == false the diag is 0; </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ab3ed5fbb875f957c3bb25735c0630b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LAnalyseClear</definition>
        <argsstring>(void)</argsstring>
        <name>LAnalyseClear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Delete the analysed data (see LAnalyse) L-part. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a0ab35d3254b8406e1888951cfe0f2ca5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::LSolve</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;in, LocalVector&lt; ValueType &gt; *out) const</argsstring>
        <name>LSolve</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Solve L out = in; if level-scheduling algorithm is provided then the graph traversing is performed in parallel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a6317edc804d8c58adac000b6d9cf85e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::UAnalyse</definition>
        <argsstring>(bool diag_unit=false)</argsstring>
        <name>UAnalyse</name>
        <param>
          <type>bool</type>
          <declname>diag_unit</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Analyse the structure (level-scheduling) U-part;. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>diag_unit == true the diag is 1;</para></listitem><listitem><para>diag_unit == false the diag is 0; </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a23c0d959e4bcbf2ab832f62c452f9338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::UAnalyseClear</definition>
        <argsstring>(void)</argsstring>
        <name>UAnalyseClear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Delete the analysed data (see UAnalyse) U-part. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1acf5119d230b9babddca4fc6211626b72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::USolve</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;in, LocalVector&lt; ValueType &gt; *out) const</argsstring>
        <name>USolve</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Solve U out = in; if level-scheduling algorithm is provided then the graph traversing is performed in parallel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a74bf982628515f449051fd5a0d2f1a59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Householder</definition>
        <argsstring>(int idx, ValueType &amp;beta, LocalVector&lt; ValueType &gt; *vec) const</argsstring>
        <name>Householder</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Compute Householder vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a2b1dfac5efdefe7193dc8f634685e6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::QRDecompose</definition>
        <argsstring>(void)</argsstring>
        <name>QRDecompose</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="classrocalution_1_1_q_r" kindref="compound">QR</ref> Decomposition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ad8626c5597ca310ef3366c7c8a135baa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::QRSolve</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;in, LocalVector&lt; ValueType &gt; *out) const</argsstring>
        <name>QRSolve</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Solve <ref refid="classrocalution_1_1_q_r" kindref="compound">QR</ref> out = in. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a51514f7bd4213881a3a7d54cabfb4bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Invert</definition>
        <argsstring>(void)</argsstring>
        <name>Invert</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Matrix inversion using <ref refid="classrocalution_1_1_q_r" kindref="compound">QR</ref> decomposition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="452" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a22b9f4275cef954b889bf89a3b5889c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ReadFileMTX</definition>
        <argsstring>(const std::string filename)</argsstring>
        <name>ReadFileMTX</name>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Read matrix from MTX (Matrix Market Format) file. </para>        </briefdescription>
        <detaileddescription>
<para>Read a matrix from Matrix Market Format file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file containing the MTX data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalMatrix&lt;ValueType&gt;<sp/>mat;</highlight></codeline>
<codeline><highlight class="normal">mat.ReadFileMTX(</highlight><highlight class="stringliteral">&quot;my_matrix.mtx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ab10a7e473601a9a1d368b48781816185" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::WriteFileMTX</definition>
        <argsstring>(const std::string filename) const</argsstring>
        <name>WriteFileMTX</name>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Write matrix to MTX (Matrix Market Format) file. </para>        </briefdescription>
        <detaileddescription>
<para>Write a matrix to Matrix Market Format file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file to write the MTX data to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalMatrix&lt;ValueType&gt;<sp/>mat;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>and<sp/>fill<sp/>mat</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.WriteFileMTX(</highlight><highlight class="stringliteral">&quot;my_matrix.mtx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a0c211ccae3c7b1f1c8f631786c552aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ReadFileCSR</definition>
        <argsstring>(const std::string filename)</argsstring>
        <name>ReadFileCSR</name>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Read matrix from CSR (rocALUTION binary format) file. </para>        </briefdescription>
        <detaileddescription>
<para>Read a CSR matrix from binary file. For details on the format, see <ref refid="classrocalution_1_1_local_matrix_1af955765ef46e0a31967b87755c6053f5" kindref="member">WriteFileCSR()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file containing the data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalMatrix&lt;ValueType&gt;<sp/>mat;</highlight></codeline>
<codeline><highlight class="normal">mat.ReadFileCSR(</highlight><highlight class="stringliteral">&quot;my_matrix.csr&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1af955765ef46e0a31967b87755c6053f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::WriteFileCSR</definition>
        <argsstring>(const std::string filename) const</argsstring>
        <name>WriteFileCSR</name>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Write CSR matrix to binary file. </para>        </briefdescription>
        <detaileddescription>
<para>Write a CSR matrix to binary file.</para><para>The binary format contains a header, the rocALUTION version and the matrix data as follows <programlisting><codeline><highlight class="comment">//<sp/>Header</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#rocALUTION<sp/>binary<sp/>csr<sp/>file&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>rocALUTION<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">out.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;version,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>CSR<sp/>matrix<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">out.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;m,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">out.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">out.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;nnz,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">out.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)csr_row_ptr,<sp/>(m<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">out.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)csr_col_ind,<sp/>nnz<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">out.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)csr_val,<sp/>nnz<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para><ref refid="classrocalution_1_1_vector" kindref="compound">Vector</ref> values array is always stored in double precision (e.g. double or std::complex&lt;double&gt;).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file to write the data to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalMatrix&lt;ValueType&gt;<sp/>mat;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>and<sp/>fill<sp/>mat</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat.WriteFileCSR(</highlight><highlight class="stringliteral">&quot;my_matrix.csr&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="543" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a3217ea740fbb231226dcf6a5def3c6e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::LocalMatrix&lt; ValueType &gt;::MoveToAccelerator</definition>
        <argsstring>(void)</argsstring>
        <name>MoveToAccelerator</name>
        <reimplements refid="classrocalution_1_1_base_rocalution_1a2238fc9adc895dff8744a5e470b79282">MoveToAccelerator</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Move the object to the accelerator backend. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a7df391e420a6a364e0a062792c1324d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::LocalMatrix&lt; ValueType &gt;::MoveToAcceleratorAsync</definition>
        <argsstring>(void)</argsstring>
        <name>MoveToAcceleratorAsync</name>
        <reimplements refid="classrocalution_1_1_base_rocalution_1a1c37dbcf976261be544dc6c66502182a">MoveToAcceleratorAsync</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Move the object to the accelerator backend with async move. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a67f483ae6f80db8474a0af39a6e19e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::LocalMatrix&lt; ValueType &gt;::MoveToHost</definition>
        <argsstring>(void)</argsstring>
        <name>MoveToHost</name>
        <reimplements refid="classrocalution_1_1_base_rocalution_1a4e572619edf6570b746c263e3b9e82e9">MoveToHost</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Move the object to the host backend. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aced88c9ae65c7dba7f81a8d33ae4bb66" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::LocalMatrix&lt; ValueType &gt;::MoveToHostAsync</definition>
        <argsstring>(void)</argsstring>
        <name>MoveToHostAsync</name>
        <reimplements refid="classrocalution_1_1_base_rocalution_1a6491e18ff3f4809b42c3c3c94d1bc1f2">MoveToHostAsync</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Move the object to the host backend with async move. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ae8919e66c49368d91ca8f8fe44dbe530" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::LocalMatrix&lt; ValueType &gt;::Sync</definition>
        <argsstring>(void)</argsstring>
        <name>Sync</name>
        <reimplements refid="classrocalution_1_1_base_rocalution_1a67986dbebc9b025e6ac30be4f85f784b">Sync</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sync (the async move) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a2b667e9fd28f21eaaefdd194ed15158f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CopyFrom</definition>
        <argsstring>(const LocalMatrix&lt; ValueType &gt; &amp;src)</argsstring>
        <name>CopyFrom</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy matrix from another <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>CopyFrom</computeroutput> copies values and structure from another local matrix. Source and destination matrix should be in the same format.</para><para><simplesect kind="note"><para>This function allows cross platform copying. One of the objects could be allocated on the accelerator backend.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Local matrix where values and structure should be copied from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalMatrix&lt;ValueType&gt;<sp/>mat1,<sp/>mat2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>and<sp/>initialize<sp/>mat1<sp/>and<sp/>mat2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>mat1<sp/>to<sp/>accelerator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>mat1.MoveToAccelerator();</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now,<sp/>mat1<sp/>is<sp/>on<sp/>the<sp/>accelerator<sp/>(if<sp/>available)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>mat2<sp/>is<sp/>on<sp/>the<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copy<sp/>mat1<sp/>to<sp/>mat2<sp/>(or<sp/>vice<sp/>versa)<sp/>will<sp/>move<sp/>data<sp/>between<sp/>host<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>accelerator<sp/>backend</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mat1.CopyFrom(mat2);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a29d774edc6dd57d727c5cf885b6bd432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CopyFromAsync</definition>
        <argsstring>(const LocalMatrix&lt; ValueType &gt; &amp;src)</argsstring>
        <name>CopyFromAsync</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Async copy matrix (values and structure) from another <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1acd9898aa33dc1f333a8eac885482e485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CloneFrom</definition>
        <argsstring>(const LocalMatrix&lt; ValueType &gt; &amp;src)</argsstring>
        <name>CloneFrom</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Clone the matrix. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>CloneFrom</computeroutput> clones the entire matrix, including values, structure and backend descriptor from another <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref> to clone from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">LocalMatrix&lt;ValueType&gt;<sp/>mat;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocate<sp/>and<sp/>initialize<sp/>mat<sp/>(host<sp/>or<sp/>accelerator)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">LocalMatrix&lt;ValueType&gt;<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>cloning<sp/>mat,<sp/>tmp<sp/>will<sp/>have<sp/>identical<sp/>values<sp/>and<sp/>structure<sp/>and<sp/>will<sp/>be<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>backend<sp/>as<sp/>mat</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tmp.CloneFrom(mat);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="608" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ab192c147b9440ca3889523ee6f6f7cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::UpdateValuesCSR</definition>
        <argsstring>(ValueType *val)</argsstring>
        <name>UpdateValuesCSR</name>
        <param>
          <type>ValueType *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update CSR matrix entries only, structure will remain the same. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="611" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aea46a0ce5f1a5879ac7c594ed7ec9afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CopyFromCSR</definition>
        <argsstring>(const int *row_offsets, const int *col, const ValueType *val)</argsstring>
        <name>CopyFromCSR</name>
        <param>
          <type>const int *</type>
          <declname>row_offsets</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const ValueType *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Copy (import) CSR matrix described in three arrays (offsets, columns, values). </para>        </briefdescription>
        <detaileddescription>
<para>The object data has to be allocated (call AllocateCSR first) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="616" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ac7af52ae1a880b6141ff96339d8cad30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CopyToCSR</definition>
        <argsstring>(int *row_offsets, int *col, ValueType *val) const</argsstring>
        <name>CopyToCSR</name>
        <param>
          <type>int *</type>
          <declname>row_offsets</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>col</declname>
        </param>
        <param>
          <type>ValueType *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Copy (export) CSR matrix described in three arrays (offsets, columns, values). </para>        </briefdescription>
        <detaileddescription>
<para>The output arrays have to be allocated </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="621" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a07c7170a8d5baac3249e6aace1c6f36b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CopyFromCOO</definition>
        <argsstring>(const int *row, const int *col, const ValueType *val)</argsstring>
        <name>CopyFromCOO</name>
        <param>
          <type>const int *</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const ValueType *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Copy (import) COO matrix described in three arrays (rows, columns, values). </para>        </briefdescription>
        <detaileddescription>
<para>The object data has to be allocated (call AllocateCOO first) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="626" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ab04f137dbfb7c951641a40e823d2546c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CopyToCOO</definition>
        <argsstring>(int *row, int *col, ValueType *val) const</argsstring>
        <name>CopyToCOO</name>
        <param>
          <type>int *</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>col</declname>
        </param>
        <param>
          <type>ValueType *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Copy (export) COO matrix described in three arrays (rows, columns, values). </para>        </briefdescription>
        <detaileddescription>
<para>The output arrays have to be allocated </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="631" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a4b22c7c6c5264370fa6c141b2ba7d5f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CopyFromHostCSR</definition>
        <argsstring>(const int *row_offset, const int *col, const ValueType *val, const std::string name, int nnz, int nrow, int ncol)</argsstring>
        <name>CopyFromHostCSR</name>
        <param>
          <type>const int *</type>
          <declname>row_offset</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const ValueType *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nnz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <briefdescription>
<para>Allocates and copies (imports) a host CSR matrix. </para>        </briefdescription>
        <detaileddescription>
<para>If the CSR matrix data pointers are only accessible as constant, the user can create a <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref> object and pass const CSR host pointers. The <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref> will then be allocated and the data will be copied to the corresponding backend, where the original object was located at.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">row_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR matrix row offset pointers. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">col</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR matrix column indices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR matrix values array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix object name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nnz</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of non-zero elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nrow</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ncol</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a909d0dc7a44dd03689f25122924b6a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CreateFromMap</definition>
        <argsstring>(const LocalVector&lt; int &gt; &amp;map, int n, int m)</argsstring>
        <name>CreateFromMap</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Create a restriction matrix operator based on an int vector map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="664" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a201bc2b46526e26a1d0164902792c850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CreateFromMap</definition>
        <argsstring>(const LocalVector&lt; int &gt; &amp;map, int n, int m, LocalMatrix&lt; ValueType &gt; *pro)</argsstring>
        <name>CreateFromMap</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>pro</declname>
        </param>
        <briefdescription>
<para>Create a restriction and prolongation matrix operator based on an int vector map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="668" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a739b5c5b11aa393c0e88f5426f7a0071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ConvertToCSR</definition>
        <argsstring>(void)</argsstring>
        <name>ConvertToCSR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Convert the matrix to CSR structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aef2306df38266d8ffc821f425f57c85d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ConvertToMCSR</definition>
        <argsstring>(void)</argsstring>
        <name>ConvertToMCSR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Convert the matrix to MCSR structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="673" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a4002613db6485154f178c96ce4d44f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ConvertToBCSR</definition>
        <argsstring>(void)</argsstring>
        <name>ConvertToBCSR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Convert the matrix to BCSR structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="675" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a77f6a603e33b25645942030aee1d2c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ConvertToCOO</definition>
        <argsstring>(void)</argsstring>
        <name>ConvertToCOO</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Convert the matrix to COO structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1adc7b89b41a3cd6b60659e8159ef13e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ConvertToELL</definition>
        <argsstring>(void)</argsstring>
        <name>ConvertToELL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Convert the matrix to ELL structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="679" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aa1b9f8a330ade76c7f484a841102018b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ConvertToDIA</definition>
        <argsstring>(void)</argsstring>
        <name>ConvertToDIA</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Convert the matrix to DIA structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="681" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1af2e44e2f4f18693de82aeb24cefe3353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ConvertToHYB</definition>
        <argsstring>(void)</argsstring>
        <name>ConvertToHYB</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Convert the matrix to HYB structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="683" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a72339728c2b5ec041621d9954a51c578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ConvertToDENSE</definition>
        <argsstring>(void)</argsstring>
        <name>ConvertToDENSE</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Convert the matrix to DENSE structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="685" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a9b2b21d5afcb1000e1a3cbac7dacb9db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ConvertTo</definition>
        <argsstring>(unsigned int matrix_format)</argsstring>
        <name>ConvertTo</name>
        <param>
          <type>unsigned int</type>
          <declname>matrix_format</declname>
        </param>
        <briefdescription>
<para>Convert the matrix to specified matrix ID format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a9a172b7d9b1ef03e16797fb2aaa89091" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::LocalMatrix&lt; ValueType &gt;::Apply</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;in, LocalVector&lt; ValueType &gt; *out) const</argsstring>
        <name>Apply</name>
        <reimplements refid="classrocalution_1_1_operator_1a8dc56052b7fc57029c7cfc4eb5a8a25b">Apply</reimplements>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Apply the operator, out = Operator(in), where in and out are local vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a892f08f618568dfbe1c55ef5895a5eb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rocalution::LocalMatrix&lt; ValueType &gt;::ApplyAdd</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;in, ValueType scalar, LocalVector&lt; ValueType &gt; *out) const</argsstring>
        <name>ApplyAdd</name>
        <reimplements refid="classrocalution_1_1_operator_1a9607876a1dc71ab7f4c03ade2e6bc952">ApplyAdd</reimplements>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Apply and add the operator, out += scalar * Operator(in), where in and out are local vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="691" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a74ff5df228d07b024901af42e861ba1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::SymbolicPower</definition>
        <argsstring>(int p)</argsstring>
        <name>SymbolicPower</name>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Perform symbolic computation (structure only) of <formula id="2">$|this|^p$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1aff5cbf55130bbc230ef30cf7d288b9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::MatrixAdd</definition>
        <argsstring>(const LocalMatrix&lt; ValueType &gt; &amp;mat, ValueType alpha=static_cast&lt; ValueType &gt;(1), ValueType beta=static_cast&lt; ValueType &gt;(1), bool structure=false)</argsstring>
        <name>MatrixAdd</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>alpha</declname>
          <defval>static_cast&lt; ValueType &gt;(1)</defval>
        </param>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
          <defval>static_cast&lt; ValueType &gt;(1)</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>structure</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Perform matrix addition, this = alpha*this + beta*mat;. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>if structure==false the sparsity pattern of the matrix is not changed;</para></listitem><listitem><para>if structure==true a new sparsity pattern is computed </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="700" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a5aaed16ec266a65af00a810d30485158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::MatrixMult</definition>
        <argsstring>(const LocalMatrix&lt; ValueType &gt; &amp;A, const LocalMatrix&lt; ValueType &gt; &amp;B)</argsstring>
        <name>MatrixMult</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Multiply two matrices, this = A * B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a12f274f560e2dc874d49951a5b1e1dd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::DiagonalMatrixMult</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;diag)</argsstring>
        <name>DiagonalMatrixMult</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
<para>Multiply the matrix with diagonal matrix (stored in <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>), as <ref refid="classrocalution_1_1_local_matrix_1ac02a9ef133bfac459ee3f2408d6b5cb1" kindref="member">DiagonalMatrixMultR()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="711" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a542e55d43ee269119e0ef7b93d2f91a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::DiagonalMatrixMultL</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;diag)</argsstring>
        <name>DiagonalMatrixMultL</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
<para>Multiply the matrix with diagonal matrix (stored in <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>), this=diag*this. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="716" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ac02a9ef133bfac459ee3f2408d6b5cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::DiagonalMatrixMultR</definition>
        <argsstring>(const LocalVector&lt; ValueType &gt; &amp;diag)</argsstring>
        <name>DiagonalMatrixMultR</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
<para>Multiply the matrix with diagonal matrix (stored in <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>), this=this*diag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="721" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1ac00dcabfacdb09128cd30f4870d6b946" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Gershgorin</definition>
        <argsstring>(ValueType &amp;lambda_min, ValueType &amp;lambda_max) const</argsstring>
        <name>Gershgorin</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>lambda_min</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>lambda_max</declname>
        </param>
        <briefdescription>
<para>Compute the spectrum approximation with Gershgorin circles theorem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="724" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1af55140e4df68bfc790fabd1d3599dc60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Compress</definition>
        <argsstring>(double drop_off)</argsstring>
        <name>Compress</name>
        <param>
          <type>double</type>
          <declname>drop_off</declname>
        </param>
        <briefdescription>
<para>Delete all entries in the matrix which abs(a_ij) &lt;= drop_off; the diagonal elements are never deleted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="729" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a331509a714652f0b1bd392492befdd1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Transpose</definition>
        <argsstring>(void)</argsstring>
        <name>Transpose</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Transpose the matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="732" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1af06a2e47ded5fba67bdffc4d78240351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Sort</definition>
        <argsstring>(void)</argsstring>
        <name>Sort</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sort the matrix indices. </para>        </briefdescription>
        <detaileddescription>
<para>Sorts the matrix by indices.<itemizedlist>
<listitem><para>For CSR matrices, column values are sorted.</para></listitem><listitem><para>For COO matrices, row indices are sorted. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a97e57c0b9a5637e2b067eab0636f0c31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::Key</definition>
        <argsstring>(long int &amp;row_key, long int &amp;col_key, long int &amp;val_key) const</argsstring>
        <name>Key</name>
        <param>
          <type>long int &amp;</type>
          <declname>row_key</declname>
        </param>
        <param>
          <type>long int &amp;</type>
          <declname>col_key</declname>
        </param>
        <param>
          <type>long int &amp;</type>
          <declname>val_key</declname>
        </param>
        <briefdescription>
<para>Compute a unique hash key for the matrix arrays. </para>        </briefdescription>
        <detaileddescription>
<para>Typically, it is hard to compare if two matrices have the same structure (and values). To do so, rocALUTION provides a keying function, that generates three keys, for the row index, column index and values array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">row_key</parametername>
</parameternamelist>
<parameterdescription>
<para>row index array key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">col_key</parametername>
</parameternamelist>
<parameterdescription>
<para>column index array key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">val_key</parametername>
</parameternamelist>
<parameterdescription>
<para>values array key </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="755" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1af9dd9cda7b02e65b668f96d7c9d042e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ReplaceColumnVector</definition>
        <argsstring>(int idx, const LocalVector&lt; ValueType &gt; &amp;vec)</argsstring>
        <name>ReplaceColumnVector</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Replace a column vector of a matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="758" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a5e9996e79994a0d1c365578ffc95c848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ReplaceRowVector</definition>
        <argsstring>(int idx, const LocalVector&lt; ValueType &gt; &amp;vec)</argsstring>
        <name>ReplaceRowVector</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Replace a row vector of a matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="761" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1acb2b6de9c63df359ce9375efec15d688" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ExtractColumnVector</definition>
        <argsstring>(int idx, LocalVector&lt; ValueType &gt; *vec) const</argsstring>
        <name>ExtractColumnVector</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Extract values from a column of a matrix to a vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="764" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a129c620b4d02dc7290cdc3f2c2bf49f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::ExtractRowVector</definition>
        <argsstring>(int idx, LocalVector&lt; ValueType &gt; *vec) const</argsstring>
        <name>ExtractRowVector</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; ValueType &gt; *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Extract values from a row of a matrix to a vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a96cbe9428a7723ebdf05c5df230ca053" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AMGConnect</definition>
        <argsstring>(ValueType eps, LocalVector&lt; int &gt; *connections) const</argsstring>
        <name>AMGConnect</name>
        <param>
          <type>ValueType</type>
          <declname>eps</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>connections</declname>
        </param>
        <briefdescription>
<para>Strong couplings for aggregation-based AMG. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="770" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1afbbe25c7f920d7bb1b2d4af3278e362c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AMGAggregate</definition>
        <argsstring>(const LocalVector&lt; int &gt; &amp;connections, LocalVector&lt; int &gt; *aggregates) const</argsstring>
        <name>AMGAggregate</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; &amp;</type>
          <declname>connections</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>aggregates</declname>
        </param>
        <briefdescription>
<para>Plain aggregation - Modification of a greedy aggregation scheme from Vanek (1996) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="774" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a55efe34f4c2e43fdb03e58de0b1e139a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AMGSmoothedAggregation</definition>
        <argsstring>(ValueType relax, const LocalVector&lt; int &gt; &amp;aggregates, const LocalVector&lt; int &gt; &amp;connections, LocalMatrix&lt; ValueType &gt; *prolong, LocalMatrix&lt; ValueType &gt; *restrict) const</argsstring>
        <name>AMGSmoothedAggregation</name>
        <param>
          <type>ValueType</type>
          <declname>relax</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; &amp;</type>
          <declname>aggregates</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; &amp;</type>
          <declname>connections</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>prolong</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>restrict</declname>
        </param>
        <briefdescription>
<para>Interpolation scheme based on smoothed aggregation from Vanek (1996) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="776" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a20f191b084461deb555bc23f91b50f3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::AMGAggregation</definition>
        <argsstring>(const LocalVector&lt; int &gt; &amp;aggregates, LocalMatrix&lt; ValueType &gt; *prolong, LocalMatrix&lt; ValueType &gt; *restrict) const</argsstring>
        <name>AMGAggregation</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; &amp;</type>
          <declname>aggregates</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>prolong</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>restrict</declname>
        </param>
        <briefdescription>
<para>Aggregation-based interpolation scheme. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="782" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a4e808f6815264a27e7eb3ec8d80751ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::RugeStueben</definition>
        <argsstring>(ValueType eps, LocalMatrix&lt; ValueType &gt; *prolong, LocalMatrix&lt; ValueType &gt; *restrict) const</argsstring>
        <name>RugeStueben</name>
        <param>
          <type>ValueType</type>
          <declname>eps</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>prolong</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>restrict</declname>
        </param>
        <briefdescription>
<para>Ruge Stueben coarsening. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="787" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1adf8e7af5f894ca6f71aa5bec3cb4f241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::FSAI</definition>
        <argsstring>(int power, const LocalMatrix&lt; ValueType &gt; *pattern)</argsstring>
        <name>FSAI</name>
        <param>
          <type>int</type>
          <declname>power</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
<para>Factorized Sparse Approximate Inverse assembly for given system matrix power pattern or external sparsity pattern. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="794" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a321308ee427e0410a3a279bec202b807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::SPAI</definition>
        <argsstring>(void)</argsstring>
        <name>SPAI</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>SParse Approximate Inverse assembly for given system matrix pattern. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="797" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a697953de89ba60acfa0fbc4e3e609a95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::InitialPairwiseAggregation</definition>
        <argsstring>(ValueType beta, int &amp;nc, LocalVector&lt; int &gt; *G, int &amp;Gsize, int **rG, int &amp;rGsize, int ordering) const</argsstring>
        <name>InitialPairwiseAggregation</name>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>G</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Gsize</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>rG</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>rGsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
<para>Initial Pairwise Aggregation scheme. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="800" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a483d8c54d44527af2609df026bc4fced" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::InitialPairwiseAggregation</definition>
        <argsstring>(const LocalMatrix&lt; ValueType &gt; &amp;mat, ValueType beta, int &amp;nc, LocalVector&lt; int &gt; *G, int &amp;Gsize, int **rG, int &amp;rGsize, int ordering) const</argsstring>
        <name>InitialPairwiseAggregation</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>G</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Gsize</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>rG</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>rGsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
<para>Initial Pairwise Aggregation scheme for split matrices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="808" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a422b401c53da06552cc4246c5c6d1c10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::FurtherPairwiseAggregation</definition>
        <argsstring>(ValueType beta, int &amp;nc, LocalVector&lt; int &gt; *G, int &amp;Gsize, int **rG, int &amp;rGsize, int ordering) const</argsstring>
        <name>FurtherPairwiseAggregation</name>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>G</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Gsize</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>rG</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>rGsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
<para>Further Pairwise Aggregation scheme. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a12ec36f0be7f8a93619da8e1977c3b51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::FurtherPairwiseAggregation</definition>
        <argsstring>(const LocalMatrix&lt; ValueType &gt; &amp;mat, ValueType beta, int &amp;nc, LocalVector&lt; int &gt; *G, int &amp;Gsize, int **rG, int &amp;rGsize, int ordering) const</argsstring>
        <name>FurtherPairwiseAggregation</name>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; *</type>
          <declname>G</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Gsize</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>rG</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>rGsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
<para>Further Pairwise Aggregation scheme for split matrices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="825" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1afe5bc9c61ab6f2aa95e334a13b4fbba3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rocalution::LocalMatrix&lt; ValueType &gt;::CoarsenOperator</definition>
        <argsstring>(LocalMatrix&lt; ValueType &gt; *Ac, int nrow, int ncol, const LocalVector&lt; int &gt; &amp;G, int Gsize, const int *rG, int rGsize) const</argsstring>
        <name>CoarsenOperator</name>
        <param>
          <type><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref>&lt; ValueType &gt; *</type>
          <declname>Ac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncol</declname>
        </param>
        <param>
          <type>const <ref refid="classrocalution_1_1_local_vector" kindref="compound">LocalVector</ref>&lt; int &gt; &amp;</type>
          <declname>G</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Gsize</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>rG</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rGsize</declname>
        </param>
        <briefdescription>
<para>Build coarse operator for pairwise aggregation scheme. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="834" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1a160ff82fbc0a88b6a5f7fece80976fcf" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool rocalution::LocalMatrix&lt; ValueType &gt;::is_host_</definition>
        <argsstring>(void) const</argsstring>
        <name>is_host_</name>
        <reimplements refid="classrocalution_1_1_base_rocalution_1a4bf61bf87e25d66b63187e21d00e4f2d">is_host_</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return true if the object is on the host. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrocalution_1_1_local_matrix_1adde0a240b27720e9df7e2706433ddb25" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool rocalution::LocalMatrix&lt; ValueType &gt;::is_accel_</definition>
        <argsstring>(void) const</argsstring>
        <name>is_accel_</name>
        <reimplements refid="classrocalution_1_1_base_rocalution_1a3fd4724cb23b135d6b6528674c3aec14">is_accel_</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return true if the object is on the accelerator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tcs/rocALUTION/src/base/local_matrix.hpp" line="844" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref> class. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classrocalution_1_1_local_matrix" kindref="compound">LocalMatrix</ref> is called local, because it will always stay on a single system. The system can contain several CPUs via UMA or NUMA memory system or it can contain an accelerator.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>- can be int, float, double, std::complex&lt;float&gt; and std::complex&lt;double&gt; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="409">
        <label>rocalution::LocalMatrix&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_local_matrix"/>
        <childnode refid="410" relation="public-inheritance">
        </childnode>
      </node>
      <node id="411">
        <label>rocalution::BaseRocalution&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_base_rocalution"/>
        <childnode refid="412" relation="public-inheritance">
        </childnode>
      </node>
      <node id="410">
        <label>rocalution::Operator&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_operator"/>
        <childnode refid="411" relation="public-inheritance">
        </childnode>
      </node>
      <node id="412">
        <label>rocalution::RocalutionObj</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="413">
        <label>rocalution::LocalMatrix&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_local_matrix"/>
        <childnode refid="414" relation="public-inheritance">
        </childnode>
      </node>
      <node id="415">
        <label>rocalution::BaseRocalution&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_base_rocalution"/>
        <childnode refid="416" relation="public-inheritance">
        </childnode>
      </node>
      <node id="414">
        <label>rocalution::Operator&lt; ValueType &gt;</label>
        <link refid="classrocalution_1_1_operator"/>
        <childnode refid="415" relation="public-inheritance">
        </childnode>
      </node>
      <node id="416">
        <label>rocalution::RocalutionObj</label>
      </node>
    </collaborationgraph>
    <location file="/home/tcs/rocALUTION/src/base/local_vector.hpp" line="38" column="1" bodyfile="/home/tcs/rocALUTION/src/base/local_vector.hpp" bodystart="38" bodyend="-1"/>
    <listofallmembers>
      <member refid="classrocalution_1_1_local_matrix_1aae36bb533533cfa66a8be5ef2cca9d79" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AddScalar</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a6356bb9437e4d2c0f497a9180af4dc42" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AddScalarDiagonal</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a0b3eebe052f2084d66987e0a3cea2951" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AddScalarOffDiagonal</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a83eeb71afdf68f0aa91eadc46143034b" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AllocateBCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a5f8a0ce95e3c24b68dbc272bf0b979ed" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AllocateCOO</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a9e2262ffb6ec53e72ebe079803616c67" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AllocateCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a0c79cf8ba3bcb18cfa5790bfcf874ce0" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AllocateDENSE</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ac22ce8c62c7f96aaf81f0ca252550d37" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AllocateDIA</name></member>
      <member refid="classrocalution_1_1_local_matrix_1acb5702157228a7cf509d518ed85023a3" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AllocateELL</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a0f11424c97e09672c909d457d06cbccb" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AllocateHYB</name></member>
      <member refid="classrocalution_1_1_local_matrix_1af3e1c51e650ffad760b7dbfc508bd80e" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AllocateMCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1afbbe25c7f920d7bb1b2d4af3278e362c" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AMGAggregate</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a20f191b084461deb555bc23f91b50f3c" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AMGAggregation</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a96cbe9428a7723ebdf05c5df230ca053" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AMGConnect</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a55efe34f4c2e43fdb03e58de0b1e139a" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>AMGSmoothedAggregation</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a9a172b7d9b1ef03e16797fb2aaa89091" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>Apply</name></member>
      <member refid="classrocalution_1_1_operator_1a4ad4397df83f1fc6af9aecf0cb9af17c" prot="public" virt="virtual" ambiguityscope="rocalution::Operator::"><scope>rocalution::LocalMatrix</scope><name>Apply</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a892f08f618568dfbe1c55ef5895a5eb7" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>ApplyAdd</name></member>
      <member refid="classrocalution_1_1_operator_1a87f809dde4c8d7d98fe443c0fb9bc92b" prot="public" virt="virtual" ambiguityscope="rocalution::Operator::"><scope>rocalution::LocalMatrix</scope><name>ApplyAdd</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1ad248c147237baaf809978dba69edf342" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>BaseRocalution</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a69e093022f1ccd32d046422c4e6196f1" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Check</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a8df7184b26588a0d06d6c65a53fd7a73" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>Clear</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a85acdb9844b7c6a630f14ace59d99f5d" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>CloneBackend</name></member>
      <member refid="classrocalution_1_1_local_matrix_1acd9898aa33dc1f333a8eac885482e485" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CloneFrom</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a14788d661ea22a00f7a74601e132bb50" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CMK</name></member>
      <member refid="classrocalution_1_1_local_matrix_1afe5bc9c61ab6f2aa95e334a13b4fbba3" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CoarsenOperator</name></member>
      <member refid="classrocalution_1_1_local_matrix_1af55140e4df68bfc790fabd1d3599dc60" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Compress</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a433a6b2f5e09f3260b269776e8322a4f" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ConnectivityOrder</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a9b2b21d5afcb1000e1a3cbac7dacb9db" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ConvertTo</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a4002613db6485154f178c96ce4d44f1a" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ConvertToBCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a77f6a603e33b25645942030aee1d2c5a" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ConvertToCOO</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a739b5c5b11aa393c0e88f5426f7a0071" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ConvertToCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a72339728c2b5ec041621d9954a51c578" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ConvertToDENSE</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aa1b9f8a330ade76c7f484a841102018b" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ConvertToDIA</name></member>
      <member refid="classrocalution_1_1_local_matrix_1adc7b89b41a3cd6b60659e8159ef13e35" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ConvertToELL</name></member>
      <member refid="classrocalution_1_1_local_matrix_1af2e44e2f4f18693de82aeb24cefe3353" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ConvertToHYB</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aef2306df38266d8ffc821f425f57c85d" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ConvertToMCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a2b667e9fd28f21eaaefdd194ed15158f" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CopyFrom</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a29d774edc6dd57d727c5cf885b6bd432" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CopyFromAsync</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a07c7170a8d5baac3249e6aace1c6f36b" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CopyFromCOO</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aea46a0ce5f1a5879ac7c594ed7ec9afd" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CopyFromCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a4b22c7c6c5264370fa6c141b2ba7d5f1" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CopyFromHostCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ab04f137dbfb7c951641a40e823d2546c" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CopyToCOO</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ac7af52ae1a880b6141ff96339d8cad30" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CopyToCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a909d0dc7a44dd03689f25122924b6a6f" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CreateFromMap</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a201bc2b46526e26a1d0164902792c850" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>CreateFromMap</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a12f274f560e2dc874d49951a5b1e1dd3" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>DiagonalMatrixMult</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a542e55d43ee269119e0ef7b93d2f91a0" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>DiagonalMatrixMultL</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ac02a9ef133bfac459ee3f2408d6b5cb1" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>DiagonalMatrixMultR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1acb2b6de9c63df359ce9375efec15d688" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ExtractColumnVector</name></member>
      <member refid="classrocalution_1_1_local_matrix_1af8468d33ff07d255428536d6ddb5ac43" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ExtractDiagonal</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aaeec31daa2a51742f5c561cf22997c39" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ExtractInverseDiagonal</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a00138976889bc73fa21db16a9c209daf" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ExtractL</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a129c620b4d02dc7290cdc3f2c2bf49f8" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ExtractRowVector</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a7811d26ca30b8ec442565efe312d2d3d" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ExtractSubMatrices</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aedb177d0e93bae5b39de9658ba9c94a7" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ExtractSubMatrix</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aaa37a2beb38374a8b0dff4ba91080fd3" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ExtractU</name></member>
      <member refid="classrocalution_1_1_local_matrix_1adf8e7af5f894ca6f71aa5bec3cb4f241" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>FSAI</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a422b401c53da06552cc4246c5c6d1c10" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>FurtherPairwiseAggregation</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a12ec36f0be7f8a93619da8e1977c3b51" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>FurtherPairwiseAggregation</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ac00dcabfacdb09128cd30f4870d6b946" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Gershgorin</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a0a077e9b521fc8af41c7f18de1cad1d5" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>GetFormat</name></member>
      <member refid="classrocalution_1_1_operator_1a47f59b41b12bb76fdc5dbc1c7155e282" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>GetGhostM</name></member>
      <member refid="classrocalution_1_1_operator_1a88c39d124082dd9254fe21c0074fea07" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>GetGhostN</name></member>
      <member refid="classrocalution_1_1_operator_1ae4d7fedf59d0fb6a2507dde507f7efb7" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>GetGhostNnz</name></member>
      <member refid="classrocalution_1_1_operator_1ab070535791b24e8c8a190bca82cb30a3" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>GetLocalM</name></member>
      <member refid="classrocalution_1_1_operator_1a63a78d3258db4fdfe74e517484591246" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>GetLocalN</name></member>
      <member refid="classrocalution_1_1_operator_1a7900eb19fb5ecb00adb18e4c8b498187" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>GetLocalNnz</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aeb0c36e210a0bbbc835874b5bac6437f" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>GetM</name></member>
      <member refid="classrocalution_1_1_local_matrix_1af87c058edc0aadb0b0c8b026f8d9b00a" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>GetN</name></member>
      <member refid="classrocalution_1_1_local_matrix_1afab6feb71269348bb0665338f167ac16" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>GetNnz</name></member>
      <member refid="classrocalution_1_1_rocalution_obj_1a4bba5aeaf4fd705efc00402f1f6ed40b" prot="protected" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>global_obj_id_</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a350700fdc95d2918442f14af47bb3ff4" prot="private" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>GlobalMatrix&lt; ValueType &gt;</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ad50ce751e5dafbeb3ca73c65cd542fce" prot="private" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>GlobalVector&lt; ValueType &gt;</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a74bf982628515f449051fd5a0d2f1a59" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Householder</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a4ca38ea117584b77253a9a116fb03440" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ICFactorize</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ac94a0833f8c29fee3d4a9019f9b923bd" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ILU0Factorize</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a73e4e1d4f189884f9c428c3c2dad0da6" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ILUpFactorize</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a61ba9e4902f01289697ae7f8e26b57b2" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ILUTFactorize</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a8f66294a7f7bf412dc44acdd6850e061" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>Info</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a697953de89ba60acfa0fbc4e3e609a95" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>InitialPairwiseAggregation</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a483d8c54d44527af2609df026bc4fced" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>InitialPairwiseAggregation</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a51514f7bd4213881a3a7d54cabfb4bcc" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Invert</name></member>
      <member refid="classrocalution_1_1_local_matrix_1adde0a240b27720e9df7e2706433ddb25" prot="protected" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>is_accel_</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a160ff82fbc0a88b6a5f7fece80976fcf" prot="protected" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>is_host_</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a97e57c0b9a5637e2b067eab0636f0c31" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Key</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a8d45e8ee1a1982d8041bf826d245fef9" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LAnalyse</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ab3ed5fbb875f957c3bb25735c0630b54" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LAnalyseClear</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a9763c9317b9e3cee8410f79f54c879d3" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LeaveDataPtrCOO</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ad67e42bdef63ec1d31d51391edb71f06" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LeaveDataPtrCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a396f929bbd45cba276a1e0ef8f9adece" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LeaveDataPtrDENSE</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ae4214ba5874900000d5455e511010d90" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LeaveDataPtrDIA</name></member>
      <member refid="classrocalution_1_1_local_matrix_1acd943926268fb9ddf641df08bb45069b" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LeaveDataPtrELL</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a1ac5d3d11c02ed8f2bb288c39a29f108" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LeaveDataPtrMCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a3536ca2f5595ab309fcda32d07e011fe" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LLAnalyse</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aa707f4992b07d0775840a8346c680e46" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LLAnalyseClear</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a58c25b8be2b7889b1a7e649e6432d967" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LLSolve</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a1cb66ea276d6420861757557092e5b43" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LLSolve</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a24693e40cc06b807cec974b4fb7c0f22" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LocalMatrix</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a4332e063cc6b7350ea0ba7b29dbec2c5" prot="private" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LocalVector&lt; ValueType &gt;</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a0ab35d3254b8406e1888951cfe0f2ca5" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LSolve</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ac731fe03bccfebcbd70feabdb144e0d9" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LUAnalyse</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a5e9eaaca1b947c97cd9069fbc80b7f8c" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LUAnalyseClear</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a2d32b530636d756b878c5ff3ba08df99" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LUFactorize</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a353e62f96359c56f26d3c22e642b019e" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>LUSolve</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a7d4a43dd8c29abce9387e5be3f8dbc70" prot="private" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>matrix_</name></member>
      <member refid="classrocalution_1_1_local_matrix_1af98059809e70d04387b74f5ca2193ee5" prot="private" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>matrix_accel_</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a58a64cee344cbb36cc3e623e89b83da8" prot="private" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>matrix_host_</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aff5cbf55130bbc230ef30cf7d288b9d5" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>MatrixAdd</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a5aaed16ec266a65af00a810d30485158" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>MatrixMult</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ac8448fee69b9c9be5335083878ae5aa9" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>MaximalIndependentSet</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a3217ea740fbb231226dcf6a5def3c6e6" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>MoveToAccelerator</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a7df391e420a6a364e0a062792c1324d5" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>MoveToAcceleratorAsync</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a67f483ae6f80db8474a0af39a6e19e7b" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>MoveToHost</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aced88c9ae65c7dba7f81a8d33ae4bb66" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>MoveToHostAsync</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a55000bad263b499ab9638ec95b852a1e" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>MultiColoring</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1a5d818c77bc906d543c44d441bb589b46" prot="protected" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>object_name_</name></member>
      <member refid="classrocalution_1_1_operator_1afcbc2abbfe58ce8c6a3d86a5a48b7fc7" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Operator</name></member>
      <member refid="classrocalution_1_1_local_matrix_1afc9486fee8f49d50db5c6cf49593aace" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Permute</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a0648ae8c06a0c0bcff3eda554eb168a8" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>PermuteBackward</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a2b1dfac5efdefe7193dc8f634685e6b9" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>QRDecompose</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ad8626c5597ca310ef3366c7c8a135baa" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>QRSolve</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aaed8576707da922ffa1107f1ce427052" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>RCMK</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a0c211ccae3c7b1f1c8f631786c552aa9" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ReadFileCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a22b9f4275cef954b889bf89a3b5889c9" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ReadFileMTX</name></member>
      <member refid="classrocalution_1_1_local_matrix_1af9dd9cda7b02e65b668f96d7c9d042e1" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ReplaceColumnVector</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a5e9996e79994a0d1c365578ffc95c848" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ReplaceRowVector</name></member>
      <member refid="classrocalution_1_1_rocalution_obj_1ad60a8b2047aad74e488c552264fa7737" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>RocalutionObj</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a4e808f6815264a27e7eb3ec8d80751ff" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>RugeStueben</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aeabad9b79068c70637ef311af34af61a" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Scale</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a8fb80b66e03ea77d2f74862e10fd90dc" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ScaleDiagonal</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ae5e6d84270b2e8a878134507a086dbf1" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ScaleOffDiagonal</name></member>
      <member refid="classrocalution_1_1_local_matrix_1acdfeb3a318104a38a539ce2e14497346" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>SetDataPtrCOO</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ac4d2555ce3f1b82bedfbcd8d80a9990f" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>SetDataPtrCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a7094a60209b0a690c9046357c841cac2" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>SetDataPtrDENSE</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a0f2ba4a64a7dbcb539b4e553ac8f1fc6" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>SetDataPtrDIA</name></member>
      <member refid="classrocalution_1_1_local_matrix_1af7e5a78d103a2471cef1f1d59f011492" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>SetDataPtrELL</name></member>
      <member refid="classrocalution_1_1_local_matrix_1aa5213597d99fc349aac27a72d1b26f8b" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>SetDataPtrMCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1af06a2e47ded5fba67bdffc4d78240351" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Sort</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a321308ee427e0410a3a279bec202b807" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>SPAI</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a74ff5df228d07b024901af42e861ba1b" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>SymbolicPower</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ae8919e66c49368d91ca8f8fe44dbe530" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>Sync</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a331509a714652f0b1bd392492befdd1f" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Transpose</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a6317edc804d8c58adac000b6d9cf85e3" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>UAnalyse</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a23c0d959e4bcbf2ab832f62c452f9338" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>UAnalyseClear</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ab192c147b9440ca3889523ee6f6f7cf9" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>UpdateValuesCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1acf5119d230b9babddca4fc6211626b72" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>USolve</name></member>
      <member refid="classrocalution_1_1_local_matrix_1af955765ef46e0a31967b87755c6053f5" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>WriteFileCSR</name></member>
      <member refid="classrocalution_1_1_local_matrix_1ab10a7e473601a9a1d368b48781816185" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>WriteFileMTX</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a378871e3f6570a110c844d4b77fdb5c9" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>ZeroBlockPermutation</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a7218681c7054a12aae6057d96d3a4e54" prot="public" virt="non-virtual"><scope>rocalution::LocalMatrix</scope><name>Zeros</name></member>
      <member refid="classrocalution_1_1_base_rocalution_1aad8ac3188091c4683181bfe6d739b7fd" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>~BaseRocalution</name></member>
      <member refid="classrocalution_1_1_local_matrix_1a30380ef77093ef355c8d666401833c60" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>~LocalMatrix</name></member>
      <member refid="classrocalution_1_1_operator_1a17862759071f26a8bfc2ec7230c5f226" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>~Operator</name></member>
      <member refid="classrocalution_1_1_rocalution_obj_1a55a2f93f798cebdda6343b20db959e2d" prot="public" virt="virtual"><scope>rocalution::LocalMatrix</scope><name>~RocalutionObj</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
